'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ServiceDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ServiceDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableinventory_Tanks As inventory_TanksDataTable
    
    Private tableinventory_TanksDataMaxRecordTimestamp As inventory_TanksDataMaxRecordTimestampDataTable
    
    Private tableinventory_TanksData As inventory_TanksDataDataTable
    
    Private tableinventory_ManualTanksData As inventory_ManualTanksDataDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inventory_Tanks")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_TanksDataTable(ds.Tables("inventory_Tanks")))
            End If
            If (Not (ds.Tables("inventory_TanksDataMaxRecordTimestamp")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_TanksDataMaxRecordTimestampDataTable(ds.Tables("inventory_TanksDataMaxRecordTimestamp")))
            End If
            If (Not (ds.Tables("inventory_TanksData")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_TanksDataDataTable(ds.Tables("inventory_TanksData")))
            End If
            If (Not (ds.Tables("inventory_ManualTanksData")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_ManualTanksDataDataTable(ds.Tables("inventory_ManualTanksData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inventory_Tanks() As inventory_TanksDataTable
        Get
            Return Me.tableinventory_Tanks
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inventory_TanksDataMaxRecordTimestamp() As inventory_TanksDataMaxRecordTimestampDataTable
        Get
            Return Me.tableinventory_TanksDataMaxRecordTimestamp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inventory_TanksData() As inventory_TanksDataDataTable
        Get
            Return Me.tableinventory_TanksData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inventory_ManualTanksData() As inventory_ManualTanksDataDataTable
        Get
            Return Me.tableinventory_ManualTanksData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ServiceDataSet = CType(MyBase.Clone,ServiceDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("inventory_Tanks")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_TanksDataTable(ds.Tables("inventory_Tanks")))
            End If
            If (Not (ds.Tables("inventory_TanksDataMaxRecordTimestamp")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_TanksDataMaxRecordTimestampDataTable(ds.Tables("inventory_TanksDataMaxRecordTimestamp")))
            End If
            If (Not (ds.Tables("inventory_TanksData")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_TanksDataDataTable(ds.Tables("inventory_TanksData")))
            End If
            If (Not (ds.Tables("inventory_ManualTanksData")) Is Nothing) Then
                MyBase.Tables.Add(New inventory_ManualTanksDataDataTable(ds.Tables("inventory_ManualTanksData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableinventory_Tanks = CType(MyBase.Tables("inventory_Tanks"),inventory_TanksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinventory_Tanks) Is Nothing) Then
                Me.tableinventory_Tanks.InitVars
            End If
        End If
        Me.tableinventory_TanksDataMaxRecordTimestamp = CType(MyBase.Tables("inventory_TanksDataMaxRecordTimestamp"),inventory_TanksDataMaxRecordTimestampDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinventory_TanksDataMaxRecordTimestamp) Is Nothing) Then
                Me.tableinventory_TanksDataMaxRecordTimestamp.InitVars
            End If
        End If
        Me.tableinventory_TanksData = CType(MyBase.Tables("inventory_TanksData"),inventory_TanksDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinventory_TanksData) Is Nothing) Then
                Me.tableinventory_TanksData.InitVars
            End If
        End If
        Me.tableinventory_ManualTanksData = CType(MyBase.Tables("inventory_ManualTanksData"),inventory_ManualTanksDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinventory_ManualTanksData) Is Nothing) Then
                Me.tableinventory_ManualTanksData.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ServiceDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ServiceDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableinventory_Tanks = New inventory_TanksDataTable()
        MyBase.Tables.Add(Me.tableinventory_Tanks)
        Me.tableinventory_TanksDataMaxRecordTimestamp = New inventory_TanksDataMaxRecordTimestampDataTable()
        MyBase.Tables.Add(Me.tableinventory_TanksDataMaxRecordTimestamp)
        Me.tableinventory_TanksData = New inventory_TanksDataDataTable()
        MyBase.Tables.Add(Me.tableinventory_TanksData)
        Me.tableinventory_ManualTanksData = New inventory_ManualTanksDataDataTable()
        MyBase.Tables.Add(Me.tableinventory_ManualTanksData)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeinventory_Tanks() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeinventory_TanksDataMaxRecordTimestamp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeinventory_TanksData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeinventory_ManualTanksData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ServiceDataSet = New ServiceDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub inventory_TanksRowChangeEventHandler(ByVal sender As Object, ByVal e As inventory_TanksRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub inventory_TanksDataMaxRecordTimestampRowChangeEventHandler(ByVal sender As Object, ByVal e As inventory_TanksDataMaxRecordTimestampRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub inventory_TanksDataRowChangeEventHandler(ByVal sender As Object, ByVal e As inventory_TanksDataRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub inventory_ManualTanksDataRowChangeEventHandler(ByVal sender As Object, ByVal e As inventory_ManualTanksDataRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class inventory_TanksDataTable
        Inherits Global.System.Data.TypedTableBase(Of inventory_TanksRow)
        
        Private columnTankId As Global.System.Data.DataColumn
        
        Private columnParkId As Global.System.Data.DataColumn
        
        Private columnControlPoint As Global.System.Data.DataColumn
        
        Private columnTankName As Global.System.Data.DataColumn
        
        Private columnIsActive As Global.System.Data.DataColumn
        
        Private columnPhdTagProductId As Global.System.Data.DataColumn
        
        Private columnPhdTagProductName As Global.System.Data.DataColumn
        
        Private columnPhdTagLiquidLevel As Global.System.Data.DataColumn
        
        Private columnLiquidLevelLowExtreme As Global.System.Data.DataColumn
        
        Private columnLiquidLevelHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagProductLevel As Global.System.Data.DataColumn
        
        Private columnProductLevelLowExtreme As Global.System.Data.DataColumn
        
        Private columnProductLevelHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagFreeWaterLevel As Global.System.Data.DataColumn
        
        Private columnFreeWaterLevelLowExtreme As Global.System.Data.DataColumn
        
        Private columnFreeWaterLevelHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagFreeWaterVolume As Global.System.Data.DataColumn
        
        Private columnFreeWaterVolumeLowExtreme As Global.System.Data.DataColumn
        
        Private columnFreeWaterVolumeHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagObservableDensity As Global.System.Data.DataColumn
        
        Private columnObservableDensityLowExtreme As Global.System.Data.DataColumn
        
        Private columnObservableDensityHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagReferenceDensity As Global.System.Data.DataColumn
        
        Private columnReferenceDensityLowExtreme As Global.System.Data.DataColumn
        
        Private columnReferenceDensityHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagGrossObservableVolume As Global.System.Data.DataColumn
        
        Private columnGrossObservableVolumeLowExtreme As Global.System.Data.DataColumn
        
        Private columnGrossObservableVolumeHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagGrossStandardVolume As Global.System.Data.DataColumn
        
        Private columnGrossStandardVolumeLowExtreme As Global.System.Data.DataColumn
        
        Private columnGrossStandardVolumeHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagNetStandardVolume As Global.System.Data.DataColumn
        
        Private columnNetStandardVolumeLowExtreme As Global.System.Data.DataColumn
        
        Private columnNetStandardVolumeHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagWeightInAir As Global.System.Data.DataColumn
        
        Private columnWeightInAirLowExtreme As Global.System.Data.DataColumn
        
        Private columnWeightInAirHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagAverageTemperature As Global.System.Data.DataColumn
        
        Private columnAverageTemperatureLowExtreme As Global.System.Data.DataColumn
        
        Private columnAverageTemperatureHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagTotalObservableVolume As Global.System.Data.DataColumn
        
        Private columnTotalObservableVolumeLowExtreme As Global.System.Data.DataColumn
        
        Private columnTotalObservableVolumeHighExtreme As Global.System.Data.DataColumn
        
        Private columnExciseStoreId As Global.System.Data.DataColumn
        
        Private columnPhdTagWeightInVacuum As Global.System.Data.DataColumn
        
        Private columnWeightInVacuumLowExtreme As Global.System.Data.DataColumn
        
        Private columnWeightInVacuumHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagMaxVolume As Global.System.Data.DataColumn
        
        Private columnMaxVolumeLowExtreme As Global.System.Data.DataColumn
        
        Private columnMaxVolumeHighExtreme As Global.System.Data.DataColumn
        
        Private columnPhdTagAvailableRoom As Global.System.Data.DataColumn
        
        Private columnAvailableRoomLowExtreme As Global.System.Data.DataColumn
        
        Private columnAvailableRoomHighExtreme As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "inventory_Tanks"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TankIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTankId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ParkIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParkId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ControlPointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlPoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TankNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTankName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IsActiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsActive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagProductIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagProductId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagProductNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagProductName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagLiquidLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagLiquidLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LiquidLevelLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidLevelLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LiquidLevelHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidLevelHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagProductLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagProductLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProductLevelLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductLevelLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProductLevelHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductLevelHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagFreeWaterLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagFreeWaterLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FreeWaterLevelLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterLevelLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FreeWaterLevelHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterLevelHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagFreeWaterVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagFreeWaterVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FreeWaterVolumeLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterVolumeLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FreeWaterVolumeHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterVolumeHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagObservableDensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagObservableDensity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ObservableDensityLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservableDensityLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ObservableDensityHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservableDensityHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagReferenceDensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagReferenceDensity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReferenceDensityLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceDensityLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReferenceDensityHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceDensityHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagGrossObservableVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagGrossObservableVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GrossObservableVolumeLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossObservableVolumeLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GrossObservableVolumeHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossObservableVolumeHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagGrossStandardVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagGrossStandardVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GrossStandardVolumeLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossStandardVolumeLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GrossStandardVolumeHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossStandardVolumeHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagNetStandardVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagNetStandardVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NetStandardVolumeLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetStandardVolumeLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NetStandardVolumeHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetStandardVolumeHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagWeightInAirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagWeightInAir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WeightInAirLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInAirLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WeightInAirHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInAirHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagAverageTemperatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagAverageTemperature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AverageTemperatureLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageTemperatureLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AverageTemperatureHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageTemperatureHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagTotalObservableVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagTotalObservableVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TotalObservableVolumeLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalObservableVolumeLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TotalObservableVolumeHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalObservableVolumeHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ExciseStoreIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExciseStoreId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagWeightInVacuumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagWeightInVacuum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WeightInVacuumLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInVacuumLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WeightInVacuumHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInVacuumHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagMaxVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagMaxVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaxVolumeLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxVolumeLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaxVolumeHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxVolumeHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhdTagAvailableRoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhdTagAvailableRoom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AvailableRoomLowExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvailableRoomLowExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AvailableRoomHighExtremeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvailableRoomHighExtreme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As inventory_TanksRow
            Get
                Return CType(Me.Rows(index),inventory_TanksRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event inventory_TanksRowChanging As inventory_TanksRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event inventory_TanksRowChanged As inventory_TanksRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event inventory_TanksRowDeleting As inventory_TanksRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event inventory_TanksRowDeleted As inventory_TanksRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addinventory_TanksRow(ByVal row As inventory_TanksRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addinventory_TanksRow( _
                    ByVal TankId As Integer,  _
                    ByVal ParkId As Integer,  _
                    ByVal ControlPoint As String,  _
                    ByVal TankName As String,  _
                    ByVal IsActive As Boolean,  _
                    ByVal PhdTagProductId As String,  _
                    ByVal PhdTagProductName As String,  _
                    ByVal PhdTagLiquidLevel As String,  _
                    ByVal LiquidLevelLowExtreme As Decimal,  _
                    ByVal LiquidLevelHighExtreme As Decimal,  _
                    ByVal PhdTagProductLevel As String,  _
                    ByVal ProductLevelLowExtreme As Decimal,  _
                    ByVal ProductLevelHighExtreme As Decimal,  _
                    ByVal PhdTagFreeWaterLevel As String,  _
                    ByVal FreeWaterLevelLowExtreme As Decimal,  _
                    ByVal FreeWaterLevelHighExtreme As Decimal,  _
                    ByVal PhdTagFreeWaterVolume As String,  _
                    ByVal FreeWaterVolumeLowExtreme As Decimal,  _
                    ByVal FreeWaterVolumeHighExtreme As Decimal,  _
                    ByVal PhdTagObservableDensity As String,  _
                    ByVal ObservableDensityLowExtreme As Decimal,  _
                    ByVal ObservableDensityHighExtreme As Decimal,  _
                    ByVal PhdTagReferenceDensity As String,  _
                    ByVal ReferenceDensityLowExtreme As Decimal,  _
                    ByVal ReferenceDensityHighExtreme As Decimal,  _
                    ByVal PhdTagGrossObservableVolume As String,  _
                    ByVal GrossObservableVolumeLowExtreme As Decimal,  _
                    ByVal GrossObservableVolumeHighExtreme As Decimal,  _
                    ByVal PhdTagGrossStandardVolume As String,  _
                    ByVal GrossStandardVolumeLowExtreme As Decimal,  _
                    ByVal GrossStandardVolumeHighExtreme As Decimal,  _
                    ByVal PhdTagNetStandardVolume As String,  _
                    ByVal NetStandardVolumeLowExtreme As Decimal,  _
                    ByVal NetStandardVolumeHighExtreme As Decimal,  _
                    ByVal PhdTagWeightInAir As String,  _
                    ByVal WeightInAirLowExtreme As Decimal,  _
                    ByVal WeightInAirHighExtreme As Decimal,  _
                    ByVal PhdTagAverageTemperature As String,  _
                    ByVal AverageTemperatureLowExtreme As Decimal,  _
                    ByVal AverageTemperatureHighExtreme As Decimal,  _
                    ByVal PhdTagTotalObservableVolume As String,  _
                    ByVal TotalObservableVolumeLowExtreme As Decimal,  _
                    ByVal TotalObservableVolumeHighExtreme As Decimal,  _
                    ByVal ExciseStoreId As String,  _
                    ByVal PhdTagWeightInVacuum As String,  _
                    ByVal WeightInVacuumLowExtreme As Decimal,  _
                    ByVal WeightInVacuumHighExtreme As Decimal,  _
                    ByVal PhdTagMaxVolume As String,  _
                    ByVal MaxVolumeLowExtreme As Decimal,  _
                    ByVal MaxVolumeHighExtreme As Decimal,  _
                    ByVal PhdTagAvailableRoom As String,  _
                    ByVal AvailableRoomLowExtreme As Decimal,  _
                    ByVal AvailableRoomHighExtreme As Decimal) As inventory_TanksRow
            Dim rowinventory_TanksRow As inventory_TanksRow = CType(Me.NewRow,inventory_TanksRow)
            Dim columnValuesArray() As Object = New Object() {TankId, ParkId, ControlPoint, TankName, IsActive, PhdTagProductId, PhdTagProductName, PhdTagLiquidLevel, LiquidLevelLowExtreme, LiquidLevelHighExtreme, PhdTagProductLevel, ProductLevelLowExtreme, ProductLevelHighExtreme, PhdTagFreeWaterLevel, FreeWaterLevelLowExtreme, FreeWaterLevelHighExtreme, PhdTagFreeWaterVolume, FreeWaterVolumeLowExtreme, FreeWaterVolumeHighExtreme, PhdTagObservableDensity, ObservableDensityLowExtreme, ObservableDensityHighExtreme, PhdTagReferenceDensity, ReferenceDensityLowExtreme, ReferenceDensityHighExtreme, PhdTagGrossObservableVolume, GrossObservableVolumeLowExtreme, GrossObservableVolumeHighExtreme, PhdTagGrossStandardVolume, GrossStandardVolumeLowExtreme, GrossStandardVolumeHighExtreme, PhdTagNetStandardVolume, NetStandardVolumeLowExtreme, NetStandardVolumeHighExtreme, PhdTagWeightInAir, WeightInAirLowExtreme, WeightInAirHighExtreme, PhdTagAverageTemperature, AverageTemperatureLowExtreme, AverageTemperatureHighExtreme, PhdTagTotalObservableVolume, TotalObservableVolumeLowExtreme, TotalObservableVolumeHighExtreme, ExciseStoreId, PhdTagWeightInVacuum, WeightInVacuumLowExtreme, WeightInVacuumHighExtreme, PhdTagMaxVolume, MaxVolumeLowExtreme, MaxVolumeHighExtreme, PhdTagAvailableRoom, AvailableRoomLowExtreme, AvailableRoomHighExtreme}
            rowinventory_TanksRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinventory_TanksRow)
            Return rowinventory_TanksRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByTankId(ByVal TankId As Integer) As inventory_TanksRow
            Return CType(Me.Rows.Find(New Object() {TankId}),inventory_TanksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As inventory_TanksDataTable = CType(MyBase.Clone,inventory_TanksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New inventory_TanksDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTankId = MyBase.Columns("TankId")
            Me.columnParkId = MyBase.Columns("ParkId")
            Me.columnControlPoint = MyBase.Columns("ControlPoint")
            Me.columnTankName = MyBase.Columns("TankName")
            Me.columnIsActive = MyBase.Columns("IsActive")
            Me.columnPhdTagProductId = MyBase.Columns("PhdTagProductId")
            Me.columnPhdTagProductName = MyBase.Columns("PhdTagProductName")
            Me.columnPhdTagLiquidLevel = MyBase.Columns("PhdTagLiquidLevel")
            Me.columnLiquidLevelLowExtreme = MyBase.Columns("LiquidLevelLowExtreme")
            Me.columnLiquidLevelHighExtreme = MyBase.Columns("LiquidLevelHighExtreme")
            Me.columnPhdTagProductLevel = MyBase.Columns("PhdTagProductLevel")
            Me.columnProductLevelLowExtreme = MyBase.Columns("ProductLevelLowExtreme")
            Me.columnProductLevelHighExtreme = MyBase.Columns("ProductLevelHighExtreme")
            Me.columnPhdTagFreeWaterLevel = MyBase.Columns("PhdTagFreeWaterLevel")
            Me.columnFreeWaterLevelLowExtreme = MyBase.Columns("FreeWaterLevelLowExtreme")
            Me.columnFreeWaterLevelHighExtreme = MyBase.Columns("FreeWaterLevelHighExtreme")
            Me.columnPhdTagFreeWaterVolume = MyBase.Columns("PhdTagFreeWaterVolume")
            Me.columnFreeWaterVolumeLowExtreme = MyBase.Columns("FreeWaterVolumeLowExtreme")
            Me.columnFreeWaterVolumeHighExtreme = MyBase.Columns("FreeWaterVolumeHighExtreme")
            Me.columnPhdTagObservableDensity = MyBase.Columns("PhdTagObservableDensity")
            Me.columnObservableDensityLowExtreme = MyBase.Columns("ObservableDensityLowExtreme")
            Me.columnObservableDensityHighExtreme = MyBase.Columns("ObservableDensityHighExtreme")
            Me.columnPhdTagReferenceDensity = MyBase.Columns("PhdTagReferenceDensity")
            Me.columnReferenceDensityLowExtreme = MyBase.Columns("ReferenceDensityLowExtreme")
            Me.columnReferenceDensityHighExtreme = MyBase.Columns("ReferenceDensityHighExtreme")
            Me.columnPhdTagGrossObservableVolume = MyBase.Columns("PhdTagGrossObservableVolume")
            Me.columnGrossObservableVolumeLowExtreme = MyBase.Columns("GrossObservableVolumeLowExtreme")
            Me.columnGrossObservableVolumeHighExtreme = MyBase.Columns("GrossObservableVolumeHighExtreme")
            Me.columnPhdTagGrossStandardVolume = MyBase.Columns("PhdTagGrossStandardVolume")
            Me.columnGrossStandardVolumeLowExtreme = MyBase.Columns("GrossStandardVolumeLowExtreme")
            Me.columnGrossStandardVolumeHighExtreme = MyBase.Columns("GrossStandardVolumeHighExtreme")
            Me.columnPhdTagNetStandardVolume = MyBase.Columns("PhdTagNetStandardVolume")
            Me.columnNetStandardVolumeLowExtreme = MyBase.Columns("NetStandardVolumeLowExtreme")
            Me.columnNetStandardVolumeHighExtreme = MyBase.Columns("NetStandardVolumeHighExtreme")
            Me.columnPhdTagWeightInAir = MyBase.Columns("PhdTagWeightInAir")
            Me.columnWeightInAirLowExtreme = MyBase.Columns("WeightInAirLowExtreme")
            Me.columnWeightInAirHighExtreme = MyBase.Columns("WeightInAirHighExtreme")
            Me.columnPhdTagAverageTemperature = MyBase.Columns("PhdTagAverageTemperature")
            Me.columnAverageTemperatureLowExtreme = MyBase.Columns("AverageTemperatureLowExtreme")
            Me.columnAverageTemperatureHighExtreme = MyBase.Columns("AverageTemperatureHighExtreme")
            Me.columnPhdTagTotalObservableVolume = MyBase.Columns("PhdTagTotalObservableVolume")
            Me.columnTotalObservableVolumeLowExtreme = MyBase.Columns("TotalObservableVolumeLowExtreme")
            Me.columnTotalObservableVolumeHighExtreme = MyBase.Columns("TotalObservableVolumeHighExtreme")
            Me.columnExciseStoreId = MyBase.Columns("ExciseStoreId")
            Me.columnPhdTagWeightInVacuum = MyBase.Columns("PhdTagWeightInVacuum")
            Me.columnWeightInVacuumLowExtreme = MyBase.Columns("WeightInVacuumLowExtreme")
            Me.columnWeightInVacuumHighExtreme = MyBase.Columns("WeightInVacuumHighExtreme")
            Me.columnPhdTagMaxVolume = MyBase.Columns("PhdTagMaxVolume")
            Me.columnMaxVolumeLowExtreme = MyBase.Columns("MaxVolumeLowExtreme")
            Me.columnMaxVolumeHighExtreme = MyBase.Columns("MaxVolumeHighExtreme")
            Me.columnPhdTagAvailableRoom = MyBase.Columns("PhdTagAvailableRoom")
            Me.columnAvailableRoomLowExtreme = MyBase.Columns("AvailableRoomLowExtreme")
            Me.columnAvailableRoomHighExtreme = MyBase.Columns("AvailableRoomHighExtreme")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTankId = New Global.System.Data.DataColumn("TankId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTankId)
            Me.columnParkId = New Global.System.Data.DataColumn("ParkId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParkId)
            Me.columnControlPoint = New Global.System.Data.DataColumn("ControlPoint", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlPoint)
            Me.columnTankName = New Global.System.Data.DataColumn("TankName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTankName)
            Me.columnIsActive = New Global.System.Data.DataColumn("IsActive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsActive)
            Me.columnPhdTagProductId = New Global.System.Data.DataColumn("PhdTagProductId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagProductId)
            Me.columnPhdTagProductName = New Global.System.Data.DataColumn("PhdTagProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagProductName)
            Me.columnPhdTagLiquidLevel = New Global.System.Data.DataColumn("PhdTagLiquidLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagLiquidLevel)
            Me.columnLiquidLevelLowExtreme = New Global.System.Data.DataColumn("LiquidLevelLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidLevelLowExtreme)
            Me.columnLiquidLevelHighExtreme = New Global.System.Data.DataColumn("LiquidLevelHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidLevelHighExtreme)
            Me.columnPhdTagProductLevel = New Global.System.Data.DataColumn("PhdTagProductLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagProductLevel)
            Me.columnProductLevelLowExtreme = New Global.System.Data.DataColumn("ProductLevelLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductLevelLowExtreme)
            Me.columnProductLevelHighExtreme = New Global.System.Data.DataColumn("ProductLevelHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductLevelHighExtreme)
            Me.columnPhdTagFreeWaterLevel = New Global.System.Data.DataColumn("PhdTagFreeWaterLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagFreeWaterLevel)
            Me.columnFreeWaterLevelLowExtreme = New Global.System.Data.DataColumn("FreeWaterLevelLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterLevelLowExtreme)
            Me.columnFreeWaterLevelHighExtreme = New Global.System.Data.DataColumn("FreeWaterLevelHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterLevelHighExtreme)
            Me.columnPhdTagFreeWaterVolume = New Global.System.Data.DataColumn("PhdTagFreeWaterVolume", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagFreeWaterVolume)
            Me.columnFreeWaterVolumeLowExtreme = New Global.System.Data.DataColumn("FreeWaterVolumeLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterVolumeLowExtreme)
            Me.columnFreeWaterVolumeHighExtreme = New Global.System.Data.DataColumn("FreeWaterVolumeHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterVolumeHighExtreme)
            Me.columnPhdTagObservableDensity = New Global.System.Data.DataColumn("PhdTagObservableDensity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagObservableDensity)
            Me.columnObservableDensityLowExtreme = New Global.System.Data.DataColumn("ObservableDensityLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservableDensityLowExtreme)
            Me.columnObservableDensityHighExtreme = New Global.System.Data.DataColumn("ObservableDensityHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservableDensityHighExtreme)
            Me.columnPhdTagReferenceDensity = New Global.System.Data.DataColumn("PhdTagReferenceDensity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagReferenceDensity)
            Me.columnReferenceDensityLowExtreme = New Global.System.Data.DataColumn("ReferenceDensityLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceDensityLowExtreme)
            Me.columnReferenceDensityHighExtreme = New Global.System.Data.DataColumn("ReferenceDensityHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceDensityHighExtreme)
            Me.columnPhdTagGrossObservableVolume = New Global.System.Data.DataColumn("PhdTagGrossObservableVolume", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagGrossObservableVolume)
            Me.columnGrossObservableVolumeLowExtreme = New Global.System.Data.DataColumn("GrossObservableVolumeLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossObservableVolumeLowExtreme)
            Me.columnGrossObservableVolumeHighExtreme = New Global.System.Data.DataColumn("GrossObservableVolumeHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossObservableVolumeHighExtreme)
            Me.columnPhdTagGrossStandardVolume = New Global.System.Data.DataColumn("PhdTagGrossStandardVolume", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagGrossStandardVolume)
            Me.columnGrossStandardVolumeLowExtreme = New Global.System.Data.DataColumn("GrossStandardVolumeLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossStandardVolumeLowExtreme)
            Me.columnGrossStandardVolumeHighExtreme = New Global.System.Data.DataColumn("GrossStandardVolumeHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossStandardVolumeHighExtreme)
            Me.columnPhdTagNetStandardVolume = New Global.System.Data.DataColumn("PhdTagNetStandardVolume", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagNetStandardVolume)
            Me.columnNetStandardVolumeLowExtreme = New Global.System.Data.DataColumn("NetStandardVolumeLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetStandardVolumeLowExtreme)
            Me.columnNetStandardVolumeHighExtreme = New Global.System.Data.DataColumn("NetStandardVolumeHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetStandardVolumeHighExtreme)
            Me.columnPhdTagWeightInAir = New Global.System.Data.DataColumn("PhdTagWeightInAir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagWeightInAir)
            Me.columnWeightInAirLowExtreme = New Global.System.Data.DataColumn("WeightInAirLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInAirLowExtreme)
            Me.columnWeightInAirHighExtreme = New Global.System.Data.DataColumn("WeightInAirHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInAirHighExtreme)
            Me.columnPhdTagAverageTemperature = New Global.System.Data.DataColumn("PhdTagAverageTemperature", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagAverageTemperature)
            Me.columnAverageTemperatureLowExtreme = New Global.System.Data.DataColumn("AverageTemperatureLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageTemperatureLowExtreme)
            Me.columnAverageTemperatureHighExtreme = New Global.System.Data.DataColumn("AverageTemperatureHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageTemperatureHighExtreme)
            Me.columnPhdTagTotalObservableVolume = New Global.System.Data.DataColumn("PhdTagTotalObservableVolume", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagTotalObservableVolume)
            Me.columnTotalObservableVolumeLowExtreme = New Global.System.Data.DataColumn("TotalObservableVolumeLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalObservableVolumeLowExtreme)
            Me.columnTotalObservableVolumeHighExtreme = New Global.System.Data.DataColumn("TotalObservableVolumeHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalObservableVolumeHighExtreme)
            Me.columnExciseStoreId = New Global.System.Data.DataColumn("ExciseStoreId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExciseStoreId)
            Me.columnPhdTagWeightInVacuum = New Global.System.Data.DataColumn("PhdTagWeightInVacuum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagWeightInVacuum)
            Me.columnWeightInVacuumLowExtreme = New Global.System.Data.DataColumn("WeightInVacuumLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInVacuumLowExtreme)
            Me.columnWeightInVacuumHighExtreme = New Global.System.Data.DataColumn("WeightInVacuumHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInVacuumHighExtreme)
            Me.columnPhdTagMaxVolume = New Global.System.Data.DataColumn("PhdTagMaxVolume", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagMaxVolume)
            Me.columnMaxVolumeLowExtreme = New Global.System.Data.DataColumn("MaxVolumeLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxVolumeLowExtreme)
            Me.columnMaxVolumeHighExtreme = New Global.System.Data.DataColumn("MaxVolumeHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxVolumeHighExtreme)
            Me.columnPhdTagAvailableRoom = New Global.System.Data.DataColumn("PhdTagAvailableRoom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhdTagAvailableRoom)
            Me.columnAvailableRoomLowExtreme = New Global.System.Data.DataColumn("AvailableRoomLowExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvailableRoomLowExtreme)
            Me.columnAvailableRoomHighExtreme = New Global.System.Data.DataColumn("AvailableRoomHighExtreme", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvailableRoomHighExtreme)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTankId}, true))
            Me.columnTankId.AllowDBNull = false
            Me.columnTankId.Unique = true
            Me.columnParkId.AllowDBNull = false
            Me.columnControlPoint.MaxLength = 50
            Me.columnTankName.MaxLength = 80
            Me.columnIsActive.AllowDBNull = False
            Me.columnPhdTagProductId.MaxLength = 50
            Me.columnPhdTagProductName.MaxLength = 50
            Me.columnPhdTagLiquidLevel.MaxLength = 50
            Me.columnLiquidLevelLowExtreme.AllowDBNull = False
            Me.columnLiquidLevelHighExtreme.AllowDBNull = False
            Me.columnPhdTagProductLevel.MaxLength = 50
            Me.columnProductLevelLowExtreme.AllowDBNull = False
            Me.columnProductLevelHighExtreme.AllowDBNull = False
            Me.columnPhdTagFreeWaterLevel.MaxLength = 50
            Me.columnFreeWaterLevelLowExtreme.AllowDBNull = False
            Me.columnFreeWaterLevelHighExtreme.AllowDBNull = False
            Me.columnPhdTagFreeWaterVolume.MaxLength = 50
            Me.columnFreeWaterVolumeLowExtreme.AllowDBNull = False
            Me.columnFreeWaterVolumeHighExtreme.AllowDBNull = False
            Me.columnPhdTagObservableDensity.MaxLength = 50
            Me.columnObservableDensityLowExtreme.AllowDBNull = False
            Me.columnObservableDensityHighExtreme.AllowDBNull = False
            Me.columnPhdTagReferenceDensity.MaxLength = 50
            Me.columnReferenceDensityLowExtreme.AllowDBNull = False
            Me.columnReferenceDensityHighExtreme.AllowDBNull = False
            Me.columnPhdTagGrossObservableVolume.MaxLength = 50
            Me.columnGrossObservableVolumeLowExtreme.AllowDBNull = False
            Me.columnGrossObservableVolumeHighExtreme.AllowDBNull = False
            Me.columnPhdTagGrossStandardVolume.MaxLength = 50
            Me.columnGrossStandardVolumeLowExtreme.AllowDBNull = False
            Me.columnGrossStandardVolumeHighExtreme.AllowDBNull = False
            Me.columnPhdTagNetStandardVolume.MaxLength = 50
            Me.columnNetStandardVolumeLowExtreme.AllowDBNull = False
            Me.columnNetStandardVolumeHighExtreme.AllowDBNull = False
            Me.columnPhdTagWeightInAir.MaxLength = 50
            Me.columnWeightInAirLowExtreme.AllowDBNull = False
            Me.columnWeightInAirHighExtreme.AllowDBNull = False
            Me.columnPhdTagAverageTemperature.MaxLength = 50
            Me.columnAverageTemperatureLowExtreme.AllowDBNull = False
            Me.columnAverageTemperatureHighExtreme.AllowDBNull = False
            Me.columnPhdTagTotalObservableVolume.MaxLength = 50
            Me.columnTotalObservableVolumeLowExtreme.AllowDBNull = False
            Me.columnTotalObservableVolumeHighExtreme.AllowDBNull = False
            Me.columnExciseStoreId.AllowDBNull = False
            Me.columnExciseStoreId.MaxLength = 50
            Me.columnPhdTagWeightInVacuum.MaxLength = 50
            Me.columnWeightInVacuumLowExtreme.AllowDBNull = False
            Me.columnWeightInVacuumHighExtreme.AllowDBNull = False
            Me.columnPhdTagMaxVolume.MaxLength = 50
            Me.columnMaxVolumeLowExtreme.AllowDBNull = False
            Me.columnMaxVolumeHighExtreme.AllowDBNull = False
            Me.columnPhdTagAvailableRoom.MaxLength = 50
            Me.columnAvailableRoomLowExtreme.AllowDBNull = False
            Me.columnAvailableRoomHighExtreme.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function Newinventory_TanksRow() As inventory_TanksRow
            Return CType(Me.NewRow, inventory_TanksRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New inventory_TanksRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(inventory_TanksRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inventory_TanksRowChangedEvent) Is Nothing) Then
                RaiseEvent inventory_TanksRowChanged(Me, New inventory_TanksRowChangeEvent(CType(e.Row, inventory_TanksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inventory_TanksRowChangingEvent) Is Nothing) Then
                RaiseEvent inventory_TanksRowChanging(Me, New inventory_TanksRowChangeEvent(CType(e.Row, inventory_TanksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inventory_TanksRowDeletedEvent) Is Nothing) Then
                RaiseEvent inventory_TanksRowDeleted(Me, New inventory_TanksRowChangeEvent(CType(e.Row, inventory_TanksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inventory_TanksRowDeletingEvent) Is Nothing) Then
                RaiseEvent inventory_TanksRowDeleting(Me, New inventory_TanksRowChangeEvent(CType(e.Row, inventory_TanksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub Removeinventory_TanksRow(ByVal row As inventory_TanksRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ServiceDataSet = New ServiceDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "inventory_TanksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class inventory_TanksDataMaxRecordTimestampDataTable
        Inherits Global.System.Data.TypedTableBase(Of inventory_TanksDataMaxRecordTimestampRow)

        Private columnTankId As Global.System.Data.DataColumn

        Private columnMaxRecordTimestamp As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "inventory_TanksDataMaxRecordTimestamp"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TankIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTankId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MaxRecordTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxRecordTimestamp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As inventory_TanksDataMaxRecordTimestampRow
            Get
                Return CType(Me.Rows(index), inventory_TanksDataMaxRecordTimestampRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataMaxRecordTimestampRowChanging As inventory_TanksDataMaxRecordTimestampRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataMaxRecordTimestampRowChanged As inventory_TanksDataMaxRecordTimestampRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataMaxRecordTimestampRowDeleting As inventory_TanksDataMaxRecordTimestampRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataMaxRecordTimestampRowDeleted As inventory_TanksDataMaxRecordTimestampRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub Addinventory_TanksDataMaxRecordTimestampRow(ByVal row As inventory_TanksDataMaxRecordTimestampRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function Addinventory_TanksDataMaxRecordTimestampRow(ByVal TankId As Integer, ByVal MaxRecordTimestamp As Date) As inventory_TanksDataMaxRecordTimestampRow
            Dim rowinventory_TanksDataMaxRecordTimestampRow As inventory_TanksDataMaxRecordTimestampRow = CType(Me.NewRow, inventory_TanksDataMaxRecordTimestampRow)
            Dim columnValuesArray() As Object = New Object() {TankId, MaxRecordTimestamp}
            rowinventory_TanksDataMaxRecordTimestampRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinventory_TanksDataMaxRecordTimestampRow)
            Return rowinventory_TanksDataMaxRecordTimestampRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByTankId(ByVal TankId As Integer) As inventory_TanksDataMaxRecordTimestampRow
            Return CType(Me.Rows.Find(New Object() {TankId}), inventory_TanksDataMaxRecordTimestampRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As inventory_TanksDataMaxRecordTimestampDataTable = CType(MyBase.Clone, inventory_TanksDataMaxRecordTimestampDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New inventory_TanksDataMaxRecordTimestampDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnTankId = MyBase.Columns("TankId")
            Me.columnMaxRecordTimestamp = MyBase.Columns("MaxRecordTimestamp")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnTankId = New Global.System.Data.DataColumn("TankId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTankId)
            Me.columnMaxRecordTimestamp = New Global.System.Data.DataColumn("MaxRecordTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxRecordTimestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTankId}, True))
            Me.columnTankId.AllowDBNull = False
            Me.columnTankId.Unique = True
            Me.columnMaxRecordTimestamp.ReadOnly = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function Newinventory_TanksDataMaxRecordTimestampRow() As inventory_TanksDataMaxRecordTimestampRow
            Return CType(Me.NewRow, inventory_TanksDataMaxRecordTimestampRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New inventory_TanksDataMaxRecordTimestampRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(inventory_TanksDataMaxRecordTimestampRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inventory_TanksDataMaxRecordTimestampRowChangedEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataMaxRecordTimestampRowChanged(Me, New inventory_TanksDataMaxRecordTimestampRowChangeEvent(CType(e.Row, inventory_TanksDataMaxRecordTimestampRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inventory_TanksDataMaxRecordTimestampRowChangingEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataMaxRecordTimestampRowChanging(Me, New inventory_TanksDataMaxRecordTimestampRowChangeEvent(CType(e.Row, inventory_TanksDataMaxRecordTimestampRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inventory_TanksDataMaxRecordTimestampRowDeletedEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataMaxRecordTimestampRowDeleted(Me, New inventory_TanksDataMaxRecordTimestampRowChangeEvent(CType(e.Row, inventory_TanksDataMaxRecordTimestampRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inventory_TanksDataMaxRecordTimestampRowDeletingEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataMaxRecordTimestampRowDeleting(Me, New inventory_TanksDataMaxRecordTimestampRowChangeEvent(CType(e.Row, inventory_TanksDataMaxRecordTimestampRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub Removeinventory_TanksDataMaxRecordTimestampRow(ByVal row As inventory_TanksDataMaxRecordTimestampRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ServiceDataSet = New ServiceDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "inventory_TanksDataMaxRecordTimestampDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class inventory_TanksDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of inventory_TanksDataRow)

        Private columnParkId As Global.System.Data.DataColumn

        Private columnTankId As Global.System.Data.DataColumn

        Private columnRecordTimestamp As Global.System.Data.DataColumn

        Private columnProductId As Global.System.Data.DataColumn

        Private columnProductName As Global.System.Data.DataColumn

        Private columnLiquidLevel As Global.System.Data.DataColumn

        Private columnTotalObservableVolume As Global.System.Data.DataColumn

        Private columnProductLevel As Global.System.Data.DataColumn

        Private columnGrossObservableVolume As Global.System.Data.DataColumn

        Private columnObservableDensity As Global.System.Data.DataColumn

        Private columnGrossStandardVolume As Global.System.Data.DataColumn

        Private columnAverageTemperature As Global.System.Data.DataColumn

        Private columnNetStandardVolume As Global.System.Data.DataColumn

        Private columnReferenceDensity As Global.System.Data.DataColumn

        Private columnWeightInAir As Global.System.Data.DataColumn

        Private columnFreeWaterLevel As Global.System.Data.DataColumn

        Private columnFreeWaterVolume As Global.System.Data.DataColumn

        Private columnLastUpdateTimestamp As Global.System.Data.DataColumn

        Private columnWeightInVacuum As Global.System.Data.DataColumn

        Private columnMaxVolume As Global.System.Data.DataColumn

        Private columnAvailableRoom As Global.System.Data.DataColumn

        Private columnExciseStoreId As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "inventory_TanksData"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ParkIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParkId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TankIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTankId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property RecordTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordTimestamp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ProductIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property LiquidLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidLevel
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TotalObservableVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalObservableVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ProductLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductLevel
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property GrossObservableVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossObservableVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ObservableDensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservableDensity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property GrossStandardVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossStandardVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AverageTemperatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageTemperature
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property NetStandardVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetStandardVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ReferenceDensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceDensity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property WeightInAirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInAir
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FreeWaterLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterLevel
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FreeWaterVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property LastUpdateTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdateTimestamp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property WeightInVacuumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInVacuum
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MaxVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AvailableRoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvailableRoom
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ExciseStoreIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExciseStoreId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As inventory_TanksDataRow
            Get
                Return CType(Me.Rows(index), inventory_TanksDataRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataRowChanging As inventory_TanksDataRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataRowChanged As inventory_TanksDataRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataRowDeleting As inventory_TanksDataRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_TanksDataRowDeleted As inventory_TanksDataRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub Addinventory_TanksDataRow(ByVal row As inventory_TanksDataRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function Addinventory_TanksDataRow( _
                    ByVal ParkId As Integer, _
                    ByVal TankId As Integer, _
                    ByVal RecordTimestamp As Date, _
                    ByVal ProductId As Integer, _
                    ByVal ProductName As String, _
                    ByVal LiquidLevel As Decimal, _
                    ByVal TotalObservableVolume As Decimal, _
                    ByVal ProductLevel As Decimal, _
                    ByVal GrossObservableVolume As Decimal, _
                    ByVal ObservableDensity As Decimal, _
                    ByVal GrossStandardVolume As Decimal, _
                    ByVal AverageTemperature As Decimal, _
                    ByVal NetStandardVolume As Decimal, _
                    ByVal ReferenceDensity As Decimal, _
                    ByVal WeightInAir As Decimal, _
                    ByVal FreeWaterLevel As Decimal, _
                    ByVal FreeWaterVolume As Decimal, _
                    ByVal LastUpdateTimestamp As Date, _
                    ByVal WeightInVacuum As Decimal, _
                    ByVal MaxVolume As Decimal, _
                    ByVal AvailableRoom As Decimal, _
                    ByVal ExciseStoreId As String) As inventory_TanksDataRow
            Dim rowinventory_TanksDataRow As inventory_TanksDataRow = CType(Me.NewRow, inventory_TanksDataRow)
            Dim columnValuesArray() As Object = New Object() {ParkId, TankId, RecordTimestamp, ProductId, ProductName, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObservableVolume, ObservableDensity, GrossStandardVolume, AverageTemperature, NetStandardVolume, ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWaterVolume, LastUpdateTimestamp, WeightInVacuum, MaxVolume, AvailableRoom, ExciseStoreId}
            rowinventory_TanksDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinventory_TanksDataRow)
            Return rowinventory_TanksDataRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByTankIdRecordTimestamp(ByVal TankId As Integer, ByVal RecordTimestamp As Date) As inventory_TanksDataRow
            Return CType(Me.Rows.Find(New Object() {TankId, RecordTimestamp}), inventory_TanksDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As inventory_TanksDataDataTable = CType(MyBase.Clone, inventory_TanksDataDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New inventory_TanksDataDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnParkId = MyBase.Columns("ParkId")
            Me.columnTankId = MyBase.Columns("TankId")
            Me.columnRecordTimestamp = MyBase.Columns("RecordTimestamp")
            Me.columnProductId = MyBase.Columns("ProductId")
            Me.columnProductName = MyBase.Columns("ProductName")
            Me.columnLiquidLevel = MyBase.Columns("LiquidLevel")
            Me.columnTotalObservableVolume = MyBase.Columns("TotalObservableVolume")
            Me.columnProductLevel = MyBase.Columns("ProductLevel")
            Me.columnGrossObservableVolume = MyBase.Columns("GrossObservableVolume")
            Me.columnObservableDensity = MyBase.Columns("ObservableDensity")
            Me.columnGrossStandardVolume = MyBase.Columns("GrossStandardVolume")
            Me.columnAverageTemperature = MyBase.Columns("AverageTemperature")
            Me.columnNetStandardVolume = MyBase.Columns("NetStandardVolume")
            Me.columnReferenceDensity = MyBase.Columns("ReferenceDensity")
            Me.columnWeightInAir = MyBase.Columns("WeightInAir")
            Me.columnFreeWaterLevel = MyBase.Columns("FreeWaterLevel")
            Me.columnFreeWaterVolume = MyBase.Columns("FreeWaterVolume")
            Me.columnLastUpdateTimestamp = MyBase.Columns("LastUpdateTimestamp")
            Me.columnWeightInVacuum = MyBase.Columns("WeightInVacuum")
            Me.columnMaxVolume = MyBase.Columns("MaxVolume")
            Me.columnAvailableRoom = MyBase.Columns("AvailableRoom")
            Me.columnExciseStoreId = MyBase.Columns("ExciseStoreId")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnParkId = New Global.System.Data.DataColumn("ParkId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParkId)
            Me.columnTankId = New Global.System.Data.DataColumn("TankId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTankId)
            Me.columnRecordTimestamp = New Global.System.Data.DataColumn("RecordTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordTimestamp)
            Me.columnProductId = New Global.System.Data.DataColumn("ProductId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductId)
            Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductName)
            Me.columnLiquidLevel = New Global.System.Data.DataColumn("LiquidLevel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidLevel)
            Me.columnTotalObservableVolume = New Global.System.Data.DataColumn("TotalObservableVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalObservableVolume)
            Me.columnProductLevel = New Global.System.Data.DataColumn("ProductLevel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductLevel)
            Me.columnGrossObservableVolume = New Global.System.Data.DataColumn("GrossObservableVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossObservableVolume)
            Me.columnObservableDensity = New Global.System.Data.DataColumn("ObservableDensity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservableDensity)
            Me.columnGrossStandardVolume = New Global.System.Data.DataColumn("GrossStandardVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossStandardVolume)
            Me.columnAverageTemperature = New Global.System.Data.DataColumn("AverageTemperature", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageTemperature)
            Me.columnNetStandardVolume = New Global.System.Data.DataColumn("NetStandardVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetStandardVolume)
            Me.columnReferenceDensity = New Global.System.Data.DataColumn("ReferenceDensity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceDensity)
            Me.columnWeightInAir = New Global.System.Data.DataColumn("WeightInAir", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInAir)
            Me.columnFreeWaterLevel = New Global.System.Data.DataColumn("FreeWaterLevel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterLevel)
            Me.columnFreeWaterVolume = New Global.System.Data.DataColumn("FreeWaterVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterVolume)
            Me.columnLastUpdateTimestamp = New Global.System.Data.DataColumn("LastUpdateTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdateTimestamp)
            Me.columnWeightInVacuum = New Global.System.Data.DataColumn("WeightInVacuum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInVacuum)
            Me.columnMaxVolume = New Global.System.Data.DataColumn("MaxVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxVolume)
            Me.columnAvailableRoom = New Global.System.Data.DataColumn("AvailableRoom", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvailableRoom)
            Me.columnExciseStoreId = New Global.System.Data.DataColumn("ExciseStoreId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExciseStoreId)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTankId, Me.columnRecordTimestamp}, True))
            Me.columnParkId.AllowDBNull = False
            Me.columnTankId.AllowDBNull = False
            Me.columnRecordTimestamp.AllowDBNull = False
            Me.columnProductName.MaxLength = 80
            Me.columnExciseStoreId.MaxLength = 2147483647
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function Newinventory_TanksDataRow() As inventory_TanksDataRow
            Return CType(Me.NewRow, inventory_TanksDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New inventory_TanksDataRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(inventory_TanksDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inventory_TanksDataRowChangedEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataRowChanged(Me, New inventory_TanksDataRowChangeEvent(CType(e.Row, inventory_TanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inventory_TanksDataRowChangingEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataRowChanging(Me, New inventory_TanksDataRowChangeEvent(CType(e.Row, inventory_TanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inventory_TanksDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataRowDeleted(Me, New inventory_TanksDataRowChangeEvent(CType(e.Row, inventory_TanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inventory_TanksDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent inventory_TanksDataRowDeleting(Me, New inventory_TanksDataRowChangeEvent(CType(e.Row, inventory_TanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub Removeinventory_TanksDataRow(ByVal row As inventory_TanksDataRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ServiceDataSet = New ServiceDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "inventory_TanksDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class inventory_ManualTanksDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of inventory_ManualTanksDataRow)

        Private columnExciseStoreId As Global.System.Data.DataColumn

        Private columnParkId As Global.System.Data.DataColumn

        Private columnTankId As Global.System.Data.DataColumn

        Private columnRecordTimestamp As Global.System.Data.DataColumn

        Private columnProductId As Global.System.Data.DataColumn

        Private columnProductName As Global.System.Data.DataColumn

        Private columnLiquidLevel As Global.System.Data.DataColumn

        Private columnTotalObservableVolume As Global.System.Data.DataColumn

        Private columnProductLevel As Global.System.Data.DataColumn

        Private columnGrossObservableVolume As Global.System.Data.DataColumn

        Private columnObservableDensity As Global.System.Data.DataColumn

        Private columnGrossStandardVolume As Global.System.Data.DataColumn

        Private columnAverageTemperature As Global.System.Data.DataColumn

        Private columnNetStandardVolume As Global.System.Data.DataColumn

        Private columnReferenceDensity As Global.System.Data.DataColumn

        Private columnWeightInAir As Global.System.Data.DataColumn

        Private columnFreeWaterLevel As Global.System.Data.DataColumn

        Private columnFreeWaterVolume As Global.System.Data.DataColumn

        Private columnLastUpdateTimestamp As Global.System.Data.DataColumn

        Private columnManualSave As Global.System.Data.DataColumn

        Private columnWeightInVacuum As Global.System.Data.DataColumn

        Private columnMaxVolume As Global.System.Data.DataColumn

        Private columnAvailableRoom As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "inventory_ManualTanksData"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ExciseStoreIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExciseStoreId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ParkIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParkId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TankIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTankId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property RecordTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordTimestamp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ProductIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductId
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property LiquidLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidLevel
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TotalObservableVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalObservableVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ProductLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductLevel
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property GrossObservableVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossObservableVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ObservableDensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservableDensity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property GrossStandardVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossStandardVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AverageTemperatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageTemperature
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property NetStandardVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetStandardVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ReferenceDensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceDensity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property WeightInAirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInAir
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FreeWaterLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterLevel
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FreeWaterVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeWaterVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property LastUpdateTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdateTimestamp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ManualSaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManualSave
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property WeightInVacuumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeightInVacuum
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MaxVolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxVolume
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AvailableRoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvailableRoom
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As inventory_ManualTanksDataRow
            Get
                Return CType(Me.Rows(index), inventory_ManualTanksDataRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_ManualTanksDataRowChanging As inventory_ManualTanksDataRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_ManualTanksDataRowChanged As inventory_ManualTanksDataRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_ManualTanksDataRowDeleting As inventory_ManualTanksDataRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event inventory_ManualTanksDataRowDeleted As inventory_ManualTanksDataRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub Addinventory_ManualTanksDataRow(ByVal row As inventory_ManualTanksDataRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function Addinventory_ManualTanksDataRow( _
                    ByVal ExciseStoreId As String, _
                    ByVal ParkId As Integer, _
                    ByVal TankId As Integer, _
                    ByVal RecordTimestamp As Date, _
                    ByVal ProductId As Integer, _
                    ByVal ProductName As String, _
                    ByVal LiquidLevel As Decimal, _
                    ByVal TotalObservableVolume As Decimal, _
                    ByVal ProductLevel As Decimal, _
                    ByVal GrossObservableVolume As Decimal, _
                    ByVal ObservableDensity As Decimal, _
                    ByVal GrossStandardVolume As Decimal, _
                    ByVal AverageTemperature As Decimal, _
                    ByVal NetStandardVolume As Decimal, _
                    ByVal ReferenceDensity As Decimal, _
                    ByVal WeightInAir As Decimal, _
                    ByVal FreeWaterLevel As Decimal, _
                    ByVal FreeWaterVolume As Decimal, _
                    ByVal LastUpdateTimestamp As Date, _
                    ByVal ManualSave As Boolean, _
                    ByVal WeightInVacuum As Decimal, _
                    ByVal MaxVolume As Decimal, _
                    ByVal AvailableRoom As Decimal) As inventory_ManualTanksDataRow
            Dim rowinventory_ManualTanksDataRow As inventory_ManualTanksDataRow = CType(Me.NewRow, inventory_ManualTanksDataRow)
            Dim columnValuesArray() As Object = New Object() {ExciseStoreId, ParkId, TankId, RecordTimestamp, ProductId, ProductName, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObservableVolume, ObservableDensity, GrossStandardVolume, AverageTemperature, NetStandardVolume, ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWaterVolume, LastUpdateTimestamp, ManualSave, WeightInVacuum, MaxVolume, AvailableRoom}
            rowinventory_ManualTanksDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinventory_ManualTanksDataRow)
            Return rowinventory_ManualTanksDataRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByTankIdRecordTimestamp(ByVal TankId As Integer, ByVal RecordTimestamp As Date) As inventory_ManualTanksDataRow
            Return CType(Me.Rows.Find(New Object() {TankId, RecordTimestamp}), inventory_ManualTanksDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As inventory_ManualTanksDataDataTable = CType(MyBase.Clone, inventory_ManualTanksDataDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New inventory_ManualTanksDataDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnExciseStoreId = MyBase.Columns("ExciseStoreId")
            Me.columnParkId = MyBase.Columns("ParkId")
            Me.columnTankId = MyBase.Columns("TankId")
            Me.columnRecordTimestamp = MyBase.Columns("RecordTimestamp")
            Me.columnProductId = MyBase.Columns("ProductId")
            Me.columnProductName = MyBase.Columns("ProductName")
            Me.columnLiquidLevel = MyBase.Columns("LiquidLevel")
            Me.columnTotalObservableVolume = MyBase.Columns("TotalObservableVolume")
            Me.columnProductLevel = MyBase.Columns("ProductLevel")
            Me.columnGrossObservableVolume = MyBase.Columns("GrossObservableVolume")
            Me.columnObservableDensity = MyBase.Columns("ObservableDensity")
            Me.columnGrossStandardVolume = MyBase.Columns("GrossStandardVolume")
            Me.columnAverageTemperature = MyBase.Columns("AverageTemperature")
            Me.columnNetStandardVolume = MyBase.Columns("NetStandardVolume")
            Me.columnReferenceDensity = MyBase.Columns("ReferenceDensity")
            Me.columnWeightInAir = MyBase.Columns("WeightInAir")
            Me.columnFreeWaterLevel = MyBase.Columns("FreeWaterLevel")
            Me.columnFreeWaterVolume = MyBase.Columns("FreeWaterVolume")
            Me.columnLastUpdateTimestamp = MyBase.Columns("LastUpdateTimestamp")
            Me.columnManualSave = MyBase.Columns("ManualSave")
            Me.columnWeightInVacuum = MyBase.Columns("WeightInVacuum")
            Me.columnMaxVolume = MyBase.Columns("MaxVolume")
            Me.columnAvailableRoom = MyBase.Columns("AvailableRoom")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnExciseStoreId = New Global.System.Data.DataColumn("ExciseStoreId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExciseStoreId)
            Me.columnParkId = New Global.System.Data.DataColumn("ParkId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParkId)
            Me.columnTankId = New Global.System.Data.DataColumn("TankId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTankId)
            Me.columnRecordTimestamp = New Global.System.Data.DataColumn("RecordTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordTimestamp)
            Me.columnProductId = New Global.System.Data.DataColumn("ProductId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductId)
            Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductName)
            Me.columnLiquidLevel = New Global.System.Data.DataColumn("LiquidLevel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidLevel)
            Me.columnTotalObservableVolume = New Global.System.Data.DataColumn("TotalObservableVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalObservableVolume)
            Me.columnProductLevel = New Global.System.Data.DataColumn("ProductLevel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductLevel)
            Me.columnGrossObservableVolume = New Global.System.Data.DataColumn("GrossObservableVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossObservableVolume)
            Me.columnObservableDensity = New Global.System.Data.DataColumn("ObservableDensity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservableDensity)
            Me.columnGrossStandardVolume = New Global.System.Data.DataColumn("GrossStandardVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossStandardVolume)
            Me.columnAverageTemperature = New Global.System.Data.DataColumn("AverageTemperature", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageTemperature)
            Me.columnNetStandardVolume = New Global.System.Data.DataColumn("NetStandardVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetStandardVolume)
            Me.columnReferenceDensity = New Global.System.Data.DataColumn("ReferenceDensity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceDensity)
            Me.columnWeightInAir = New Global.System.Data.DataColumn("WeightInAir", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInAir)
            Me.columnFreeWaterLevel = New Global.System.Data.DataColumn("FreeWaterLevel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterLevel)
            Me.columnFreeWaterVolume = New Global.System.Data.DataColumn("FreeWaterVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeWaterVolume)
            Me.columnLastUpdateTimestamp = New Global.System.Data.DataColumn("LastUpdateTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdateTimestamp)
            Me.columnManualSave = New Global.System.Data.DataColumn("ManualSave", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManualSave)
            Me.columnWeightInVacuum = New Global.System.Data.DataColumn("WeightInVacuum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightInVacuum)
            Me.columnMaxVolume = New Global.System.Data.DataColumn("MaxVolume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxVolume)
            Me.columnAvailableRoom = New Global.System.Data.DataColumn("AvailableRoom", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvailableRoom)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTankId, Me.columnRecordTimestamp}, True))
            Me.columnExciseStoreId.MaxLength = 50
            Me.columnParkId.AllowDBNull = False
            Me.columnTankId.AllowDBNull = False
            Me.columnRecordTimestamp.AllowDBNull = False
            Me.columnProductName.MaxLength = 80
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function Newinventory_ManualTanksDataRow() As inventory_ManualTanksDataRow
            Return CType(Me.NewRow, inventory_ManualTanksDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New inventory_ManualTanksDataRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(inventory_ManualTanksDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inventory_ManualTanksDataRowChangedEvent) Is Nothing) Then
                RaiseEvent inventory_ManualTanksDataRowChanged(Me, New inventory_ManualTanksDataRowChangeEvent(CType(e.Row, inventory_ManualTanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inventory_ManualTanksDataRowChangingEvent) Is Nothing) Then
                RaiseEvent inventory_ManualTanksDataRowChanging(Me, New inventory_ManualTanksDataRowChangeEvent(CType(e.Row, inventory_ManualTanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inventory_ManualTanksDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent inventory_ManualTanksDataRowDeleted(Me, New inventory_ManualTanksDataRowChangeEvent(CType(e.Row, inventory_ManualTanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inventory_ManualTanksDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent inventory_ManualTanksDataRowDeleting(Me, New inventory_ManualTanksDataRowChangeEvent(CType(e.Row, inventory_ManualTanksDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub Removeinventory_ManualTanksDataRow(ByVal row As inventory_ManualTanksDataRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ServiceDataSet = New ServiceDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "inventory_ManualTanksDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class inventory_TanksRow
        Inherits Global.System.Data.DataRow

        Private tableinventory_Tanks As inventory_TanksDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinventory_Tanks = CType(Me.Table, inventory_TanksDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TankId() As Integer
            Get
                Return CType(Me(Me.tableinventory_Tanks.TankIdColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_Tanks.TankIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ParkId() As Integer
            Get
                Return CType(Me(Me.tableinventory_Tanks.ParkIdColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_Tanks.ParkIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ControlPoint() As String
            Get
                If Me.IsControlPointNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.ControlPointColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.ControlPointColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TankName() As String
            Get
                If Me.IsTankNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.TankNameColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.TankNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property IsActive() As Boolean
            Get
                Return CType(Me(Me.tableinventory_Tanks.IsActiveColumn), Boolean)
            End Get
            Set(value As Boolean)
                Me(Me.tableinventory_Tanks.IsActiveColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagProductId() As String
            Get
                If Me.IsPhdTagProductIdNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagProductIdColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagProductIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagProductName() As String
            Get
                If Me.IsPhdTagProductNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagProductNameColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagProductNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagLiquidLevel() As String
            Get
                If Me.IsPhdTagLiquidLevelNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagLiquidLevelColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagLiquidLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property LiquidLevelLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.LiquidLevelLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.LiquidLevelLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property LiquidLevelHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.LiquidLevelHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.LiquidLevelHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagProductLevel() As String
            Get
                If Me.IsPhdTagProductLevelNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagProductLevelColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagProductLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductLevelLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.ProductLevelLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.ProductLevelLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductLevelHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.ProductLevelHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.ProductLevelHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagFreeWaterLevel() As String
            Get
                If Me.IsPhdTagFreeWaterLevelNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagFreeWaterLevelColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagFreeWaterLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterLevelLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.FreeWaterLevelLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.FreeWaterLevelLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterLevelHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.FreeWaterLevelHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.FreeWaterLevelHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagFreeWaterVolume() As String
            Get
                If Me.IsPhdTagFreeWaterVolumeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagFreeWaterVolumeColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagFreeWaterVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterVolumeLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.FreeWaterVolumeLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.FreeWaterVolumeLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterVolumeHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.FreeWaterVolumeHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.FreeWaterVolumeHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagObservableDensity() As String
            Get
                If Me.IsPhdTagObservableDensityNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagObservableDensityColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagObservableDensityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ObservableDensityLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.ObservableDensityLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.ObservableDensityLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ObservableDensityHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.ObservableDensityHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.ObservableDensityHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagReferenceDensity() As String
            Get
                If Me.IsPhdTagReferenceDensityNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagReferenceDensityColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagReferenceDensityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ReferenceDensityLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.ReferenceDensityLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.ReferenceDensityLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ReferenceDensityHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.ReferenceDensityHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.ReferenceDensityHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagGrossObservableVolume() As String
            Get
                If Me.IsPhdTagGrossObservableVolumeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagGrossObservableVolumeColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagGrossObservableVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossObservableVolumeLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.GrossObservableVolumeLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.GrossObservableVolumeLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossObservableVolumeHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.GrossObservableVolumeHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.GrossObservableVolumeHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagGrossStandardVolume() As String
            Get
                If Me.IsPhdTagGrossStandardVolumeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagGrossStandardVolumeColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagGrossStandardVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossStandardVolumeLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.GrossStandardVolumeLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.GrossStandardVolumeLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossStandardVolumeHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.GrossStandardVolumeHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.GrossStandardVolumeHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagNetStandardVolume() As String
            Get
                If Me.IsPhdTagNetStandardVolumeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagNetStandardVolumeColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagNetStandardVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property NetStandardVolumeLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.NetStandardVolumeLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.NetStandardVolumeLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property NetStandardVolumeHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.NetStandardVolumeHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.NetStandardVolumeHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagWeightInAir() As String
            Get
                If Me.IsPhdTagWeightInAirNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagWeightInAirColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagWeightInAirColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInAirLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.WeightInAirLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.WeightInAirLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInAirHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.WeightInAirHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.WeightInAirHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagAverageTemperature() As String
            Get
                If Me.IsPhdTagAverageTemperatureNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagAverageTemperatureColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagAverageTemperatureColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AverageTemperatureLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.AverageTemperatureLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.AverageTemperatureLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AverageTemperatureHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.AverageTemperatureHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.AverageTemperatureHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagTotalObservableVolume() As String
            Get
                If Me.IsPhdTagTotalObservableVolumeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagTotalObservableVolumeColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagTotalObservableVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TotalObservableVolumeLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.TotalObservableVolumeLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.TotalObservableVolumeLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TotalObservableVolumeHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.TotalObservableVolumeHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.TotalObservableVolumeHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ExciseStoreId() As String
            Get
                Return CType(Me(Me.tableinventory_Tanks.ExciseStoreIdColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.ExciseStoreIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagWeightInVacuum() As String
            Get
                Try
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagWeightInVacuumColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhdTagWeightInVacuum' in table 'inventory_Tanks' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagWeightInVacuumColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInVacuumLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.WeightInVacuumLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.WeightInVacuumLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInVacuumHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.WeightInVacuumHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.WeightInVacuumHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagMaxVolume() As String
            Get
                Try
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagMaxVolumeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhdTagMaxVolume' in table 'inventory_Tanks' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagMaxVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MaxVolumeLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.MaxVolumeLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.MaxVolumeLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MaxVolumeHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.MaxVolumeHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.MaxVolumeHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PhdTagAvailableRoom() As String
            Get
                Try
                    Return CType(Me(Me.tableinventory_Tanks.PhdTagAvailableRoomColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhdTagAvailableRoom' in table 'inventory_Tanks' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableinventory_Tanks.PhdTagAvailableRoomColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AvailableRoomLowExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.AvailableRoomLowExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.AvailableRoomLowExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AvailableRoomHighExtreme() As Decimal
            Get
                Return CType(Me(Me.tableinventory_Tanks.AvailableRoomHighExtremeColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_Tanks.AvailableRoomHighExtremeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsControlPointNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.ControlPointColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetControlPointNull()
            Me(Me.tableinventory_Tanks.ControlPointColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsTankNameNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.TankNameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetTankNameNull()
            Me(Me.tableinventory_Tanks.TankNameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagProductIdNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagProductIdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagProductIdNull()
            Me(Me.tableinventory_Tanks.PhdTagProductIdColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagProductNameNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagProductNameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagProductNameNull()
            Me(Me.tableinventory_Tanks.PhdTagProductNameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagLiquidLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagLiquidLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagLiquidLevelNull()
            Me(Me.tableinventory_Tanks.PhdTagLiquidLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagProductLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagProductLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagProductLevelNull()
            Me(Me.tableinventory_Tanks.PhdTagProductLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagFreeWaterLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagFreeWaterLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagFreeWaterLevelNull()
            Me(Me.tableinventory_Tanks.PhdTagFreeWaterLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagFreeWaterVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagFreeWaterVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagFreeWaterVolumeNull()
            Me(Me.tableinventory_Tanks.PhdTagFreeWaterVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagObservableDensityNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagObservableDensityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagObservableDensityNull()
            Me(Me.tableinventory_Tanks.PhdTagObservableDensityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagReferenceDensityNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagReferenceDensityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagReferenceDensityNull()
            Me(Me.tableinventory_Tanks.PhdTagReferenceDensityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagGrossObservableVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagGrossObservableVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagGrossObservableVolumeNull()
            Me(Me.tableinventory_Tanks.PhdTagGrossObservableVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagGrossStandardVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagGrossStandardVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagGrossStandardVolumeNull()
            Me(Me.tableinventory_Tanks.PhdTagGrossStandardVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagNetStandardVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagNetStandardVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagNetStandardVolumeNull()
            Me(Me.tableinventory_Tanks.PhdTagNetStandardVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagWeightInAirNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagWeightInAirColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagWeightInAirNull()
            Me(Me.tableinventory_Tanks.PhdTagWeightInAirColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagAverageTemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagAverageTemperatureColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagAverageTemperatureNull()
            Me(Me.tableinventory_Tanks.PhdTagAverageTemperatureColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagTotalObservableVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagTotalObservableVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagTotalObservableVolumeNull()
            Me(Me.tableinventory_Tanks.PhdTagTotalObservableVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagWeightInVacuumNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagWeightInVacuumColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagWeightInVacuumNull()
            Me(Me.tableinventory_Tanks.PhdTagWeightInVacuumColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagMaxVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagMaxVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagMaxVolumeNull()
            Me(Me.tableinventory_Tanks.PhdTagMaxVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPhdTagAvailableRoomNull() As Boolean
            Return Me.IsNull(Me.tableinventory_Tanks.PhdTagAvailableRoomColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPhdTagAvailableRoomNull()
            Me(Me.tableinventory_Tanks.PhdTagAvailableRoomColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class inventory_TanksDataMaxRecordTimestampRow
        Inherits Global.System.Data.DataRow

        Private tableinventory_TanksDataMaxRecordTimestamp As inventory_TanksDataMaxRecordTimestampDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinventory_TanksDataMaxRecordTimestamp = CType(Me.Table, inventory_TanksDataMaxRecordTimestampDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TankId() As Integer
            Get
                Return CType(Me(Me.tableinventory_TanksDataMaxRecordTimestamp.TankIdColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_TanksDataMaxRecordTimestamp.TankIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MaxRecordTimestamp() As Date
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksDataMaxRecordTimestamp.MaxRecordTimestampColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaxRecordTimestamp' in table 'inventory_TanksDataMaxRecordT" & _
                            "imestamp' is DBNull.", e)
                End Try
            End Get
            Set(value As Date)
                Me(Me.tableinventory_TanksDataMaxRecordTimestamp.MaxRecordTimestampColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMaxRecordTimestampNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksDataMaxRecordTimestamp.MaxRecordTimestampColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMaxRecordTimestampNull()
            Me(Me.tableinventory_TanksDataMaxRecordTimestamp.MaxRecordTimestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class inventory_TanksDataRow
        Inherits Global.System.Data.DataRow

        Private tableinventory_TanksData As inventory_TanksDataDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinventory_TanksData = CType(Me.Table, inventory_TanksDataDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ParkId() As Integer
            Get
                Return CType(Me(Me.tableinventory_TanksData.ParkIdColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_TanksData.ParkIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TankId() As Integer
            Get
                Return CType(Me(Me.tableinventory_TanksData.TankIdColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_TanksData.TankIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property RecordTimestamp() As Date
            Get
                Return CType(Me(Me.tableinventory_TanksData.RecordTimestampColumn), Date)
            End Get
            Set(value As Date)
                Me(Me.tableinventory_TanksData.RecordTimestampColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductId() As Integer
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.ProductIdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductId' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_TanksData.ProductIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductName() As String
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.ProductNameColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableinventory_TanksData.ProductNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property LiquidLevel() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.LiquidLevelColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LiquidLevel' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.LiquidLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TotalObservableVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.TotalObservableVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalObservableVolume' in table 'inventory_TanksData' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.TotalObservableVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductLevel() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.ProductLevelColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductLevel' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.ProductLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossObservableVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.GrossObservableVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrossObservableVolume' in table 'inventory_TanksData' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.GrossObservableVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ObservableDensity() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.ObservableDensityColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservableDensity' in table 'inventory_TanksData' is DBNull" & _
                            ".", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.ObservableDensityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossStandardVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.GrossStandardVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrossStandardVolume' in table 'inventory_TanksData' is DBNu" & _
                            "ll.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.GrossStandardVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AverageTemperature() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.AverageTemperatureColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageTemperature' in table 'inventory_TanksData' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.AverageTemperatureColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property NetStandardVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.NetStandardVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NetStandardVolume' in table 'inventory_TanksData' is DBNull" & _
                            ".", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.NetStandardVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ReferenceDensity() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.ReferenceDensityColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenceDensity' in table 'inventory_TanksData' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.ReferenceDensityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInAir() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.WeightInAirColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WeightInAir' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.WeightInAirColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterLevel() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.FreeWaterLevelColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FreeWaterLevel' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.FreeWaterLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.FreeWaterVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FreeWaterVolume' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.FreeWaterVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property LastUpdateTimestamp() As Date
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.LastUpdateTimestampColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdateTimestamp' in table 'inventory_TanksData' is DBNu" & _
                            "ll.", e)
                End Try
            End Get
            Set(value As Date)
                Me(Me.tableinventory_TanksData.LastUpdateTimestampColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInVacuum() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.WeightInVacuumColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WeightInVacuum' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.WeightInVacuumColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MaxVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.MaxVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaxVolume' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.MaxVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AvailableRoom() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.AvailableRoomColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AvailableRoom' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_TanksData.AvailableRoomColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ExciseStoreId() As String
            Get
                Try
                    Return CType(Me(Me.tableinventory_TanksData.ExciseStoreIdColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExciseStoreId' in table 'inventory_TanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableinventory_TanksData.ExciseStoreIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsProductIdNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.ProductIdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetProductIdNull()
            Me(Me.tableinventory_TanksData.ProductIdColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsProductNameNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.ProductNameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetProductNameNull()
            Me(Me.tableinventory_TanksData.ProductNameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsLiquidLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.LiquidLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetLiquidLevelNull()
            Me(Me.tableinventory_TanksData.LiquidLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsTotalObservableVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.TotalObservableVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetTotalObservableVolumeNull()
            Me(Me.tableinventory_TanksData.TotalObservableVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsProductLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.ProductLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetProductLevelNull()
            Me(Me.tableinventory_TanksData.ProductLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsGrossObservableVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.GrossObservableVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetGrossObservableVolumeNull()
            Me(Me.tableinventory_TanksData.GrossObservableVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsObservableDensityNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.ObservableDensityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetObservableDensityNull()
            Me(Me.tableinventory_TanksData.ObservableDensityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsGrossStandardVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.GrossStandardVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetGrossStandardVolumeNull()
            Me(Me.tableinventory_TanksData.GrossStandardVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAverageTemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.AverageTemperatureColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAverageTemperatureNull()
            Me(Me.tableinventory_TanksData.AverageTemperatureColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsNetStandardVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.NetStandardVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetNetStandardVolumeNull()
            Me(Me.tableinventory_TanksData.NetStandardVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsReferenceDensityNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.ReferenceDensityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetReferenceDensityNull()
            Me(Me.tableinventory_TanksData.ReferenceDensityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsWeightInAirNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.WeightInAirColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetWeightInAirNull()
            Me(Me.tableinventory_TanksData.WeightInAirColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFreeWaterLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.FreeWaterLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFreeWaterLevelNull()
            Me(Me.tableinventory_TanksData.FreeWaterLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFreeWaterVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.FreeWaterVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFreeWaterVolumeNull()
            Me(Me.tableinventory_TanksData.FreeWaterVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsLastUpdateTimestampNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.LastUpdateTimestampColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetLastUpdateTimestampNull()
            Me(Me.tableinventory_TanksData.LastUpdateTimestampColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsWeightInVacuumNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.WeightInVacuumColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetWeightInVacuumNull()
            Me(Me.tableinventory_TanksData.WeightInVacuumColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMaxVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.MaxVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMaxVolumeNull()
            Me(Me.tableinventory_TanksData.MaxVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAvailableRoomNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.AvailableRoomColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAvailableRoomNull()
            Me(Me.tableinventory_TanksData.AvailableRoomColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsExciseStoreIdNull() As Boolean
            Return Me.IsNull(Me.tableinventory_TanksData.ExciseStoreIdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetExciseStoreIdNull()
            Me(Me.tableinventory_TanksData.ExciseStoreIdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class inventory_ManualTanksDataRow
        Inherits Global.System.Data.DataRow

        Private tableinventory_ManualTanksData As inventory_ManualTanksDataDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinventory_ManualTanksData = CType(Me.Table, inventory_ManualTanksDataDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ExciseStoreId() As String
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.ExciseStoreIdColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExciseStoreId' in table 'inventory_ManualTanksData' is DBNu" & _
                            "ll.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableinventory_ManualTanksData.ExciseStoreIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ParkId() As Integer
            Get
                Return CType(Me(Me.tableinventory_ManualTanksData.ParkIdColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_ManualTanksData.ParkIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TankId() As Integer
            Get
                Return CType(Me(Me.tableinventory_ManualTanksData.TankIdColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_ManualTanksData.TankIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property RecordTimestamp() As Date
            Get
                Return CType(Me(Me.tableinventory_ManualTanksData.RecordTimestampColumn), Date)
            End Get
            Set(value As Date)
                Me(Me.tableinventory_ManualTanksData.RecordTimestampColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductId() As Integer
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.ProductIdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductId' in table 'inventory_ManualTanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableinventory_ManualTanksData.ProductIdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductName() As String
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.ProductNameColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'inventory_ManualTanksData' is DBNull" & _
                            ".", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableinventory_ManualTanksData.ProductNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property LiquidLevel() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.LiquidLevelColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LiquidLevel' in table 'inventory_ManualTanksData' is DBNull" & _
                            ".", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.LiquidLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TotalObservableVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.TotalObservableVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalObservableVolume' in table 'inventory_ManualTanksData'" & _
                            " is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.TotalObservableVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ProductLevel() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.ProductLevelColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductLevel' in table 'inventory_ManualTanksData' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.ProductLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossObservableVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.GrossObservableVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrossObservableVolume' in table 'inventory_ManualTanksData'" & _
                            " is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.GrossObservableVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ObservableDensity() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.ObservableDensityColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservableDensity' in table 'inventory_ManualTanksData' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.ObservableDensityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property GrossStandardVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.GrossStandardVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrossStandardVolume' in table 'inventory_ManualTanksData' i" & _
                            "s DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.GrossStandardVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AverageTemperature() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.AverageTemperatureColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageTemperature' in table 'inventory_ManualTanksData' is" & _
                            " DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.AverageTemperatureColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property NetStandardVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.NetStandardVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NetStandardVolume' in table 'inventory_ManualTanksData' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.NetStandardVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ReferenceDensity() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.ReferenceDensityColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenceDensity' in table 'inventory_ManualTanksData' is D" & _
                            "BNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.ReferenceDensityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInAir() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.WeightInAirColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WeightInAir' in table 'inventory_ManualTanksData' is DBNull" & _
                            ".", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.WeightInAirColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterLevel() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.FreeWaterLevelColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FreeWaterLevel' in table 'inventory_ManualTanksData' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.FreeWaterLevelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FreeWaterVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.FreeWaterVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FreeWaterVolume' in table 'inventory_ManualTanksData' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.FreeWaterVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property LastUpdateTimestamp() As Date
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.LastUpdateTimestampColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdateTimestamp' in table 'inventory_ManualTanksData' i" & _
                            "s DBNull.", e)
                End Try
            End Get
            Set(value As Date)
                Me(Me.tableinventory_ManualTanksData.LastUpdateTimestampColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ManualSave() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.ManualSaveColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManualSave' in table 'inventory_ManualTanksData' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableinventory_ManualTanksData.ManualSaveColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WeightInVacuum() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.WeightInVacuumColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WeightInVacuum' in table 'inventory_ManualTanksData' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.WeightInVacuumColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MaxVolume() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.MaxVolumeColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaxVolume' in table 'inventory_ManualTanksData' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.MaxVolumeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AvailableRoom() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableinventory_ManualTanksData.AvailableRoomColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AvailableRoom' in table 'inventory_ManualTanksData' is DBNu" & _
                            "ll.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableinventory_ManualTanksData.AvailableRoomColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsExciseStoreIdNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.ExciseStoreIdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetExciseStoreIdNull()
            Me(Me.tableinventory_ManualTanksData.ExciseStoreIdColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsProductIdNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.ProductIdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetProductIdNull()
            Me(Me.tableinventory_ManualTanksData.ProductIdColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsProductNameNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.ProductNameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetProductNameNull()
            Me(Me.tableinventory_ManualTanksData.ProductNameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsLiquidLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.LiquidLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetLiquidLevelNull()
            Me(Me.tableinventory_ManualTanksData.LiquidLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsTotalObservableVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.TotalObservableVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetTotalObservableVolumeNull()
            Me(Me.tableinventory_ManualTanksData.TotalObservableVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsProductLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.ProductLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetProductLevelNull()
            Me(Me.tableinventory_ManualTanksData.ProductLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsGrossObservableVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.GrossObservableVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetGrossObservableVolumeNull()
            Me(Me.tableinventory_ManualTanksData.GrossObservableVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsObservableDensityNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.ObservableDensityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetObservableDensityNull()
            Me(Me.tableinventory_ManualTanksData.ObservableDensityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsGrossStandardVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.GrossStandardVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetGrossStandardVolumeNull()
            Me(Me.tableinventory_ManualTanksData.GrossStandardVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAverageTemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.AverageTemperatureColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAverageTemperatureNull()
            Me(Me.tableinventory_ManualTanksData.AverageTemperatureColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsNetStandardVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.NetStandardVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetNetStandardVolumeNull()
            Me(Me.tableinventory_ManualTanksData.NetStandardVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsReferenceDensityNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.ReferenceDensityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetReferenceDensityNull()
            Me(Me.tableinventory_ManualTanksData.ReferenceDensityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsWeightInAirNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.WeightInAirColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetWeightInAirNull()
            Me(Me.tableinventory_ManualTanksData.WeightInAirColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFreeWaterLevelNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.FreeWaterLevelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFreeWaterLevelNull()
            Me(Me.tableinventory_ManualTanksData.FreeWaterLevelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFreeWaterVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.FreeWaterVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFreeWaterVolumeNull()
            Me(Me.tableinventory_ManualTanksData.FreeWaterVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsLastUpdateTimestampNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.LastUpdateTimestampColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetLastUpdateTimestampNull()
            Me(Me.tableinventory_ManualTanksData.LastUpdateTimestampColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsManualSaveNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.ManualSaveColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetManualSaveNull()
            Me(Me.tableinventory_ManualTanksData.ManualSaveColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsWeightInVacuumNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.WeightInVacuumColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetWeightInVacuumNull()
            Me(Me.tableinventory_ManualTanksData.WeightInVacuumColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMaxVolumeNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.MaxVolumeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMaxVolumeNull()
            Me(Me.tableinventory_ManualTanksData.MaxVolumeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAvailableRoomNull() As Boolean
            Return Me.IsNull(Me.tableinventory_ManualTanksData.AvailableRoomColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAvailableRoomNull()
            Me(Me.tableinventory_ManualTanksData.AvailableRoomColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class inventory_TanksRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As inventory_TanksRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As inventory_TanksRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As inventory_TanksRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class inventory_TanksDataMaxRecordTimestampRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As inventory_TanksDataMaxRecordTimestampRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As inventory_TanksDataMaxRecordTimestampRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As inventory_TanksDataMaxRecordTimestampRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class inventory_TanksDataRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As inventory_TanksDataRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As inventory_TanksDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As inventory_TanksDataRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class inventory_ManualTanksDataRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As inventory_ManualTanksDataRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As inventory_ManualTanksDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As inventory_ManualTanksDataRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ServiceDataSetTableAdapters

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class inventory_TanksTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "inventory_Tanks"
            tableMapping.ColumnMappings.Add("TankId", "TankId")
            tableMapping.ColumnMappings.Add("ParkId", "ParkId")
            tableMapping.ColumnMappings.Add("ControlPoint", "ControlPoint")
            tableMapping.ColumnMappings.Add("TankName", "TankName")
            tableMapping.ColumnMappings.Add("IsActive", "IsActive")
            tableMapping.ColumnMappings.Add("PhdTagProductId", "PhdTagProductId")
            tableMapping.ColumnMappings.Add("PhdTagProductName", "PhdTagProductName")
            tableMapping.ColumnMappings.Add("PhdTagLiquidLevel", "PhdTagLiquidLevel")
            tableMapping.ColumnMappings.Add("LiquidLevelLowExtreme", "LiquidLevelLowExtreme")
            tableMapping.ColumnMappings.Add("LiquidLevelHighExtreme", "LiquidLevelHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagProductLevel", "PhdTagProductLevel")
            tableMapping.ColumnMappings.Add("ProductLevelLowExtreme", "ProductLevelLowExtreme")
            tableMapping.ColumnMappings.Add("ProductLevelHighExtreme", "ProductLevelHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagFreeWaterLevel", "PhdTagFreeWaterLevel")
            tableMapping.ColumnMappings.Add("FreeWaterLevelLowExtreme", "FreeWaterLevelLowExtreme")
            tableMapping.ColumnMappings.Add("FreeWaterLevelHighExtreme", "FreeWaterLevelHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagFreeWaterVolume", "PhdTagFreeWaterVolume")
            tableMapping.ColumnMappings.Add("FreeWaterVolumeLowExtreme", "FreeWaterVolumeLowExtreme")
            tableMapping.ColumnMappings.Add("FreeWaterVolumeHighExtreme", "FreeWaterVolumeHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagObservableDensity", "PhdTagObservableDensity")
            tableMapping.ColumnMappings.Add("ObservableDensityLowExtreme", "ObservableDensityLowExtreme")
            tableMapping.ColumnMappings.Add("ObservableDensityHighExtreme", "ObservableDensityHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagReferenceDensity", "PhdTagReferenceDensity")
            tableMapping.ColumnMappings.Add("ReferenceDensityLowExtreme", "ReferenceDensityLowExtreme")
            tableMapping.ColumnMappings.Add("ReferenceDensityHighExtreme", "ReferenceDensityHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagGrossObservableVolume", "PhdTagGrossObservableVolume")
            tableMapping.ColumnMappings.Add("GrossObservableVolumeLowExtreme", "GrossObservableVolumeLowExtreme")
            tableMapping.ColumnMappings.Add("GrossObservableVolumeHighExtreme", "GrossObservableVolumeHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagGrossStandardVolume", "PhdTagGrossStandardVolume")
            tableMapping.ColumnMappings.Add("GrossStandardVolumeLowExtreme", "GrossStandardVolumeLowExtreme")
            tableMapping.ColumnMappings.Add("GrossStandardVolumeHighExtreme", "GrossStandardVolumeHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagNetStandardVolume", "PhdTagNetStandardVolume")
            tableMapping.ColumnMappings.Add("NetStandardVolumeLowExtreme", "NetStandardVolumeLowExtreme")
            tableMapping.ColumnMappings.Add("NetStandardVolumeHighExtreme", "NetStandardVolumeHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagWeightInAir", "PhdTagWeightInAir")
            tableMapping.ColumnMappings.Add("WeightInAirLowExtreme", "WeightInAirLowExtreme")
            tableMapping.ColumnMappings.Add("WeightInAirHighExtreme", "WeightInAirHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagAverageTemperature", "PhdTagAverageTemperature")
            tableMapping.ColumnMappings.Add("AverageTemperatureLowExtreme", "AverageTemperatureLowExtreme")
            tableMapping.ColumnMappings.Add("AverageTemperatureHighExtreme", "AverageTemperatureHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagTotalObservableVolume", "PhdTagTotalObservableVolume")
            tableMapping.ColumnMappings.Add("TotalObservableVolumeLowExtreme", "TotalObservableVolumeLowExtreme")
            tableMapping.ColumnMappings.Add("TotalObservableVolumeHighExtreme", "TotalObservableVolumeHighExtreme")
            tableMapping.ColumnMappings.Add("ExciseStoreId", "ExciseStoreId")
            tableMapping.ColumnMappings.Add("PhdTagWeightInVacuum", "PhdTagWeightInVacuum")
            tableMapping.ColumnMappings.Add("WeightInVacuumLowExtreme", "WeightInVacuumLowExtreme")
            tableMapping.ColumnMappings.Add("WeightInVacuumHighExtreme", "WeightInVacuumHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagMaxVolume", "PhdTagMaxVolume")
            tableMapping.ColumnMappings.Add("MaxVolumeLowExtreme", "MaxVolumeLowExtreme")
            tableMapping.ColumnMappings.Add("MaxVolumeHighExtreme", "MaxVolumeHighExtreme")
            tableMapping.ColumnMappings.Add("PhdTagAvailableRoom", "PhdTagAvailableRoom")
            tableMapping.ColumnMappings.Add("AvailableRoomLowExtreme", "AvailableRoomLowExtreme")
            tableMapping.ColumnMappings.Add("AvailableRoomHighExtreme", "AvailableRoomHighExtreme")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.CollectingProductionDataSystem.Phd2SqlInventory.My.MySettings.Default.CollectingPrimaryDataSystemConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        InventoryTanks.Id AS TankId, InventoryTanks.InventoryParkId AS Park" & _
                "Id, InventoryTanks.ControlPoint, InventoryTanks.TankName, InventoryTanks.IsActiv" & _
                "e, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagProductId, InventoryTanks.Phd" & _
                "TagProductName, InventoryTanks.PhdTagLiquidLevel, InventoryTanks.LiquidLevelLowE" & _
                "xtreme, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.LiquidLevelHighExtreme, Invent" & _
                "oryTanks.PhdTagProductLevel, InventoryTanks.ProductLevelLowExtreme, InventoryTan" & _
                "ks.ProductLevelHighExtreme," & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          InventoryTanks.PhdTagFree" & _
                "WaterLevel, InventoryTanks.FreeWaterLevelLowExtreme, InventoryTanks.FreeWaterLev" & _
                "elHighExtreme, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagFreeWaterVolume, " & _
                "InventoryTanks.FreeWaterVolumeLowExtreme, InventoryTanks.FreeWaterVolumeHighExtr" & _
                "eme, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagObservableDensity, Inventor" & _
                "yTanks.ObservableDensityLowExtreme, InventoryTanks.ObservableDensityHighExtreme," & _
                " " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagReferenceDensity, InventoryTank" & _
                "s.ReferenceDensityLowExtreme, InventoryTanks.ReferenceDensityHighExtreme, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "    " & _
                "                     InventoryTanks.PhdTagGrossObservableVolume, InventoryTanks." & _
                "GrossObservableVolumeLowExtreme, InventoryTanks.GrossObservableVolumeHighExtreme" & _
                ", " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagGrossStandardVolume, Inventory" & _
                "Tanks.GrossStandardVolumeLowExtreme, InventoryTanks.GrossStandardVolumeHighExtre" & _
                "me, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagNetStandardVolume, Inventory" & _
                "Tanks.NetStandardVolumeLowExtreme, InventoryTanks.NetStandardVolumeHighExtreme, " & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagWeightInAir, InventoryTanks.Weig" & _
                "htInAirLowExtreme, InventoryTanks.WeightInAirHighExtreme, InventoryTanks.PhdTagA" & _
                "verageTemperature, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.AverageTemperatureL" & _
                "owExtreme, InventoryTanks.AverageTemperatureHighExtreme, InventoryTanks.PhdTagTo" & _
                "talObservableVolume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.TotalObservableVo" & _
                "lumeLowExtreme, InventoryTanks.TotalObservableVolumeHighExtreme, ExciseStores.Na" & _
                "me AS ExciseStoreId, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagWeightInVac" & _
                "uum, InventoryTanks.WeightInVacuumLowExtreme, InventoryTanks.WeightInVacuumHighE" & _
                "xtreme, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.PhdTagMaxVolume, InventoryTank" & _
                "s.MaxVolumeLowExtreme, InventoryTanks.MaxVolumeHighExtreme, InventoryTanks.PhdTa" & _
                "gAvailableRoom, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryTanks.AvailableRoomLowExtrem" & _
                "e, InventoryTanks.AvailableRoomHighExtreme" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            InventoryTanks INNER" & _
                " JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         InventoryParks ON InventoryTanks.InventoryParkId" & _
                " = InventoryParks.Id INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         ExciseStores ON Invent" & _
                "oryParks.ExciseStoreId = ExciseStores.Id" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (InventoryTanks.IsActive " & _
                "= 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As ServiceDataSet.inventory_TanksDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As ServiceDataSet.inventory_TanksDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ServiceDataSet.inventory_TanksDataTable = New ServiceDataSet.inventory_TanksDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class inventory_TanksDataMaxRecordTimestampTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "inventory_TanksDataMaxRecordTimestamp"
            tableMapping.ColumnMappings.Add("TankId", "TankId")
            tableMapping.ColumnMappings.Add("MaxRecordTimestamp", "MaxRecordTimestamp")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.CollectingProductionDataSystem.Phd2SqlInventory.My.MySettings.Default.CollectingPrimaryDataSystemConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        InventoryTanks.Id AS TankId, MAX(InventoryTanksData.RecordTimestamp" & _
                ") AS MaxRecordTimestamp" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            InventoryTanksData FULL OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   " & _
                "                      InventoryTanks ON InventoryTanksData.TankId = InventoryTan" & _
                "ks.Id" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY InventoryTanks.Id, InventoryTanks.IsActive" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "HAVING        (Inven" & _
                "toryTanks.IsActive = 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As ServiceDataSet.inventory_TanksDataMaxRecordTimestampDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As ServiceDataSet.inventory_TanksDataMaxRecordTimestampDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ServiceDataSet.inventory_TanksDataMaxRecordTimestampDataTable = New ServiceDataSet.inventory_TanksDataMaxRecordTimestampDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class inventory_TanksDataTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "inventory_TanksData"
            tableMapping.ColumnMappings.Add("ParkId", "ParkId")
            tableMapping.ColumnMappings.Add("TankId", "TankId")
            tableMapping.ColumnMappings.Add("RecordTimestamp", "RecordTimestamp")
            tableMapping.ColumnMappings.Add("ProductId", "ProductId")
            tableMapping.ColumnMappings.Add("ProductName", "ProductName")
            tableMapping.ColumnMappings.Add("LiquidLevel", "LiquidLevel")
            tableMapping.ColumnMappings.Add("TotalObservableVolume", "TotalObservableVolume")
            tableMapping.ColumnMappings.Add("ProductLevel", "ProductLevel")
            tableMapping.ColumnMappings.Add("GrossObservableVolume", "GrossObservableVolume")
            tableMapping.ColumnMappings.Add("ObservableDensity", "ObservableDensity")
            tableMapping.ColumnMappings.Add("GrossStandardVolume", "GrossStandardVolume")
            tableMapping.ColumnMappings.Add("AverageTemperature", "AverageTemperature")
            tableMapping.ColumnMappings.Add("NetStandardVolume", "NetStandardVolume")
            tableMapping.ColumnMappings.Add("ReferenceDensity", "ReferenceDensity")
            tableMapping.ColumnMappings.Add("WeightInAir", "WeightInAir")
            tableMapping.ColumnMappings.Add("FreeWaterLevel", "FreeWaterLevel")
            tableMapping.ColumnMappings.Add("FreeWaterVolume", "FreeWaterVolume")
            tableMapping.ColumnMappings.Add("LastUpdateTimestamp", "LastUpdateTimestamp")
            tableMapping.ColumnMappings.Add("WeightInVacuum", "WeightInVacuum")
            tableMapping.ColumnMappings.Add("MaxVolume", "MaxVolume")
            tableMapping.ColumnMappings.Add("AvailableRoom", "AvailableRoom")
            tableMapping.ColumnMappings.Add("ExciseStoreId", "ExciseStoreId")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [InventoryTanksData] WHERE (([ParkId] = @Original_ParkId) AND ([TankI" & _
                "d] = @Original_TankId) AND ([RecordTimestamp] = @Original_RecordTimestamp) AND (" & _
                "(@IsNull_ProductId = 1 AND [ProductId] IS NULL) OR ([ProductId] = @Original_Prod" & _
                "uctId)) AND ((@IsNull_LiquidLevel = 1 AND [LiquidLevel] IS NULL) OR ([LiquidLeve" & _
                "l] = @Original_LiquidLevel)) AND ((@IsNull_TotalObservableVolume = 1 AND [TotalO" & _
                "bservableVolume] IS NULL) OR ([TotalObservableVolume] = @Original_TotalObservabl" & _
                "eVolume)) AND ((@IsNull_ProductLevel = 1 AND [ProductLevel] IS NULL) OR ([Produc" & _
                "tLevel] = @Original_ProductLevel)) AND ((@IsNull_GrossObservableVolume = 1 AND [" & _
                "GrossObservableVolume] IS NULL) OR ([GrossObservableVolume] = @Original_GrossObs" & _
                "ervableVolume)) AND ((@IsNull_ObservableDensity = 1 AND [ObservableDensity] IS N" & _
                "ULL) OR ([ObservableDensity] = @Original_ObservableDensity)) AND ((@IsNull_Gross" & _
                "StandardVolume = 1 AND [GrossStandardVolume] IS NULL) OR ([GrossStandardVolume] " & _
                "= @Original_GrossStandardVolume)) AND ((@IsNull_AverageTemperature = 1 AND [Aver" & _
                "ageTemperature] IS NULL) OR ([AverageTemperature] = @Original_AverageTemperature" & _
                ")) AND ((@IsNull_NetStandardVolume = 1 AND [NetStandardVolume] IS NULL) OR ([Net" & _
                "StandardVolume] = @Original_NetStandardVolume)) AND ((@IsNull_ReferenceDensity =" & _
                " 1 AND [ReferenceDensity] IS NULL) OR ([ReferenceDensity] = @Original_ReferenceD" & _
                "ensity)) AND ((@IsNull_WeightInAir = 1 AND [WeightInAir] IS NULL) OR ([WeightInA" & _
                "ir] = @Original_WeightInAir)) AND ((@IsNull_FreeWaterLevel = 1 AND [FreeWaterLev" & _
                "el] IS NULL) OR ([FreeWaterLevel] = @Original_FreeWaterLevel)) AND ((@IsNull_Fre" & _
                "eWaterVolume = 1 AND [FreeWaterVolume] IS NULL) OR ([FreeWaterVolume] = @Origina" & _
                "l_FreeWaterVolume)) AND ((@IsNull_LastUpdateTimestamp = 1 AND [LastUpdateTimesta" & _
                "mp] IS NULL) OR ([LastUpdateTimestamp] = @Original_LastUpdateTimestamp)) AND ((@" & _
                "IsNull_WeightInVacuum = 1 AND [WeightInVacuum] IS NULL) OR ([WeightInVacuum] = @" & _
                "Original_WeightInVacuum)) AND ((@IsNull_MaxVolume = 1 AND [MaxVolume] IS NULL) O" & _
                "R ([MaxVolume] = @Original_MaxVolume)) AND ((@IsNull_AvailableRoom = 1 AND [Avai" & _
                "lableRoom] IS NULL) OR ([AvailableRoom] = @Original_AvailableRoom)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ParkId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParkId", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TankId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TankId", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordTimestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProductId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProductId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LiquidLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidLevel", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LiquidLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "LiquidLevel", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalObservableVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalObservableVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TotalObservableVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProductLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductLevel", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProductLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ProductLevel", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GrossObservableVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GrossObservableVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GrossObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossObservableVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ObservableDensity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservableDensity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ObservableDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ObservableDensity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GrossStandardVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GrossStandardVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GrossStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossStandardVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AverageTemperature", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageTemperature", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AverageTemperature", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AverageTemperature", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NetStandardVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetStandardVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NetStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NetStandardVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferenceDensity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferenceDensity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferenceDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ReferenceDensity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WeightInAir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WeightInAir", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WeightInAir", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInAir", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FreeWaterLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FreeWaterLevel", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FreeWaterLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterLevel", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FreeWaterVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FreeWaterVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FreeWaterVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastUpdateTimestamp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastUpdateTimestamp", Global.System.Data.SqlDbType.DateTime2, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WeightInVacuum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WeightInVacuum", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WeightInVacuum", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInVacuum", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaxVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MaxVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AvailableRoom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvailableRoom", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AvailableRoom", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AvailableRoom", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [InventoryTanksData] ([ExciseStoreId], [ParkId], [TankId], [RecordTim" & _
                "estamp], [ProductId], [ProductName], [LiquidLevel], [TotalObservableVolume], [Pr" & _
                "oductLevel], [GrossObservableVolume], [ObservableDensity], [GrossStandardVolume]" & _
                ", [AverageTemperature], [NetStandardVolume], [ReferenceDensity], [WeightInAir], " & _
                "[FreeWaterLevel], [FreeWaterVolume], [LastUpdateTimestamp], [WeightInVacuum], [M" & _
                "axVolume], [AvailableRoom]) VALUES (@ExciseStoreId, @ParkId, @TankId, @RecordTim" & _
                "estamp, @ProductId, @ProductName, @LiquidLevel, @TotalObservableVolume, @Product" & _
                "Level, @GrossObservableVolume, @ObservableDensity, @GrossStandardVolume, @Averag" & _
                "eTemperature, @NetStandardVolume, @ReferenceDensity, @WeightInAir, @FreeWaterLev" & _
                "el, @FreeWaterVolume, @LastUpdateTimestamp, @WeightInVacuum, @MaxVolume, @Availa" & _
                "bleRoom);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ExciseStoreId, ParkId, TankId, RecordTimestamp, ProductId, Pro" & _
                "ductName, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObservableVolum" & _
                "e, ObservableDensity, GrossStandardVolume, AverageTemperature, NetStandardVolume" & _
                ", ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWaterVolume, LastUpdateTime" & _
                "stamp, WeightInVacuum, MaxVolume, AvailableRoom FROM InventoryTanksData WHERE (R" & _
                "ecordTimestamp = @RecordTimestamp) AND (TankId = @TankId)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExciseStoreId", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExciseStoreId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParkId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParkId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TankId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TankId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTimestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "LiquidLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TotalObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ProductLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservableDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ObservableDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageTemperature", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AverageTemperature", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NetStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NetStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ReferenceDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInAir", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInAir", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateTimestamp", Global.System.Data.SqlDbType.DateTime2, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInVacuum", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInVacuum", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MaxVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AvailableRoom", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AvailableRoom", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [InventoryTanksData] SET [ExciseStoreId] = @ExciseStoreId, [ParkId] = @Par" & _
                "kId, [TankId] = @TankId, [RecordTimestamp] = @RecordTimestamp, [ProductId] = @Pr" & _
                "oductId, [ProductName] = @ProductName, [LiquidLevel] = @LiquidLevel, [TotalObser" & _
                "vableVolume] = @TotalObservableVolume, [ProductLevel] = @ProductLevel, [GrossObs" & _
                "ervableVolume] = @GrossObservableVolume, [ObservableDensity] = @ObservableDensit" & _
                "y, [GrossStandardVolume] = @GrossStandardVolume, [AverageTemperature] = @Average" & _
                "Temperature, [NetStandardVolume] = @NetStandardVolume, [ReferenceDensity] = @Ref" & _
                "erenceDensity, [WeightInAir] = @WeightInAir, [FreeWaterLevel] = @FreeWaterLevel," & _
                " [FreeWaterVolume] = @FreeWaterVolume, [LastUpdateTimestamp] = @LastUpdateTimest" & _
                "amp, [WeightInVacuum] = @WeightInVacuum, [MaxVolume] = @MaxVolume, [AvailableRoo" & _
                "m] = @AvailableRoom WHERE (([ParkId] = @Original_ParkId) AND ([TankId] = @Origin" & _
                "al_TankId) AND ([RecordTimestamp] = @Original_RecordTimestamp) AND ((@IsNull_Pro" & _
                "ductId = 1 AND [ProductId] IS NULL) OR ([ProductId] = @Original_ProductId)) AND " & _
                "((@IsNull_LiquidLevel = 1 AND [LiquidLevel] IS NULL) OR ([LiquidLevel] = @Origin" & _
                "al_LiquidLevel)) AND ((@IsNull_TotalObservableVolume = 1 AND [TotalObservableVol" & _
                "ume] IS NULL) OR ([TotalObservableVolume] = @Original_TotalObservableVolume)) AN" & _
                "D ((@IsNull_ProductLevel = 1 AND [ProductLevel] IS NULL) OR ([ProductLevel] = @O" & _
                "riginal_ProductLevel)) AND ((@IsNull_GrossObservableVolume = 1 AND [GrossObserva" & _
                "bleVolume] IS NULL) OR ([GrossObservableVolume] = @Original_GrossObservableVolum" & _
                "e)) AND ((@IsNull_ObservableDensity = 1 AND [ObservableDensity] IS NULL) OR ([Ob" & _
                "servableDensity] = @Original_ObservableDensity)) AND ((@IsNull_GrossStandardVolu" & _
                "me = 1 AND [GrossStandardVolume] IS NULL) OR ([GrossStandardVolume] = @Original_" & _
                "GrossStandardVolume)) AND ((@IsNull_AverageTemperature = 1 AND [AverageTemperatu" & _
                "re] IS NULL) OR ([AverageTemperature] = @Original_AverageTemperature)) AND ((@Is" & _
                "Null_NetStandardVolume = 1 AND [NetStandardVolume] IS NULL) OR ([NetStandardVolu" & _
                "me] = @Original_NetStandardVolume)) AND ((@IsNull_ReferenceDensity = 1 AND [Refe" & _
                "renceDensity] IS NULL) OR ([ReferenceDensity] = @Original_ReferenceDensity)) AND" & _
                " ((@IsNull_WeightInAir = 1 AND [WeightInAir] IS NULL) OR ([WeightInAir] = @Origi" & _
                "nal_WeightInAir)) AND ((@IsNull_FreeWaterLevel = 1 AND [FreeWaterLevel] IS NULL)" & _
                " OR ([FreeWaterLevel] = @Original_FreeWaterLevel)) AND ((@IsNull_FreeWaterVolume" & _
                " = 1 AND [FreeWaterVolume] IS NULL) OR ([FreeWaterVolume] = @Original_FreeWaterV" & _
                "olume)) AND ((@IsNull_LastUpdateTimestamp = 1 AND [LastUpdateTimestamp] IS NULL)" & _
                " OR ([LastUpdateTimestamp] = @Original_LastUpdateTimestamp)) AND ((@IsNull_Weigh" & _
                "tInVacuum = 1 AND [WeightInVacuum] IS NULL) OR ([WeightInVacuum] = @Original_Wei" & _
                "ghtInVacuum)) AND ((@IsNull_MaxVolume = 1 AND [MaxVolume] IS NULL) OR ([MaxVolum" & _
                "e] = @Original_MaxVolume)) AND ((@IsNull_AvailableRoom = 1 AND [AvailableRoom] I" & _
                "S NULL) OR ([AvailableRoom] = @Original_AvailableRoom)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ExciseStoreId," & _
                " ParkId, TankId, RecordTimestamp, ProductId, ProductName, LiquidLevel, TotalObse" & _
                "rvableVolume, ProductLevel, GrossObservableVolume, ObservableDensity, GrossStand" & _
                "ardVolume, AverageTemperature, NetStandardVolume, ReferenceDensity, WeightInAir," & _
                " FreeWaterLevel, FreeWaterVolume, LastUpdateTimestamp, WeightInVacuum, MaxVolume" & _
                ", AvailableRoom FROM InventoryTanksData WHERE (RecordTimestamp = @RecordTimestam" & _
                "p) AND (TankId = @TankId)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExciseStoreId", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExciseStoreId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParkId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParkId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TankId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TankId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTimestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "LiquidLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TotalObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ProductLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservableDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ObservableDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageTemperature", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AverageTemperature", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NetStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NetStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ReferenceDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInAir", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInAir", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateTimestamp", Global.System.Data.SqlDbType.DateTime2, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInVacuum", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInVacuum", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MaxVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AvailableRoom", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AvailableRoom", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ParkId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParkId", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TankId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TankId", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordTimestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProductId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProductId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LiquidLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LiquidLevel", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LiquidLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "LiquidLevel", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalObservableVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalObservableVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TotalObservableVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProductLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductLevel", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProductLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ProductLevel", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GrossObservableVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GrossObservableVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GrossObservableVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossObservableVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ObservableDensity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ObservableDensity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ObservableDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ObservableDensity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GrossStandardVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GrossStandardVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GrossStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "GrossStandardVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AverageTemperature", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageTemperature", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AverageTemperature", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AverageTemperature", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NetStandardVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetStandardVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NetStandardVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "NetStandardVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferenceDensity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferenceDensity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferenceDensity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ReferenceDensity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WeightInAir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WeightInAir", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WeightInAir", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInAir", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FreeWaterLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FreeWaterLevel", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FreeWaterLevel", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterLevel", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FreeWaterVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FreeWaterVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FreeWaterVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "FreeWaterVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastUpdateTimestamp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastUpdateTimestamp", Global.System.Data.SqlDbType.DateTime2, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WeightInVacuum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WeightInVacuum", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WeightInVacuum", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "WeightInVacuum", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaxVolume", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxVolume", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxVolume", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MaxVolume", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AvailableRoom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvailableRoom", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AvailableRoom", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "AvailableRoom", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.CollectingProductionDataSystem.Phd2SqlInventory.My.MySettings.Default.CollectingPrimaryDataSystemConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ExciseStoreId, ParkId, TankId, RecordTimestamp, ProductId, ProductN" & _
                "ame, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObservableVolume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "                         ObservableDensity, GrossStandardVolume, AverageTemperat" & _
                "ure, NetStandardVolume, ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWater" & _
                "Volume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         LastUpdateTimestamp, WeightInVacuum, MaxVolum" & _
                "e, AvailableRoom" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            InventoryTanksData" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (RecordTimest" & _
                "amp >= @RecordTimestamp)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTimestamp", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As ServiceDataSet.inventory_TanksDataDataTable, ByVal RecordTimestamp As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RecordTimestamp, Date)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData(ByVal RecordTimestamp As Date) As ServiceDataSet.inventory_TanksDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RecordTimestamp, Date)
            Dim dataTable As ServiceDataSet.inventory_TanksDataDataTable = New ServiceDataSet.inventory_TanksDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As ServiceDataSet.inventory_TanksDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As ServiceDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "inventory_TanksData")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class inventory_ManualTanksDataTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "inventory_ManualTanksData"
            tableMapping.ColumnMappings.Add("ExciseStoreId", "ExciseStoreId")
            tableMapping.ColumnMappings.Add("ParkId", "ParkId")
            tableMapping.ColumnMappings.Add("TankId", "TankId")
            tableMapping.ColumnMappings.Add("RecordTimestamp", "RecordTimestamp")
            tableMapping.ColumnMappings.Add("ProductId", "ProductId")
            tableMapping.ColumnMappings.Add("ProductName", "ProductName")
            tableMapping.ColumnMappings.Add("LiquidLevel", "LiquidLevel")
            tableMapping.ColumnMappings.Add("TotalObservableVolume", "TotalObservableVolume")
            tableMapping.ColumnMappings.Add("ProductLevel", "ProductLevel")
            tableMapping.ColumnMappings.Add("GrossObservableVolume", "GrossObservableVolume")
            tableMapping.ColumnMappings.Add("ObservableDensity", "ObservableDensity")
            tableMapping.ColumnMappings.Add("GrossStandardVolume", "GrossStandardVolume")
            tableMapping.ColumnMappings.Add("AverageTemperature", "AverageTemperature")
            tableMapping.ColumnMappings.Add("NetStandardVolume", "NetStandardVolume")
            tableMapping.ColumnMappings.Add("ReferenceDensity", "ReferenceDensity")
            tableMapping.ColumnMappings.Add("WeightInAir", "WeightInAir")
            tableMapping.ColumnMappings.Add("FreeWaterLevel", "FreeWaterLevel")
            tableMapping.ColumnMappings.Add("FreeWaterVolume", "FreeWaterVolume")
            tableMapping.ColumnMappings.Add("LastUpdateTimestamp", "LastUpdateTimestamp")
            tableMapping.ColumnMappings.Add("ManualSave", "ManualSave")
            tableMapping.ColumnMappings.Add("WeightInVacuum", "WeightInVacuum")
            tableMapping.ColumnMappings.Add("MaxVolume", "MaxVolume")
            tableMapping.ColumnMappings.Add("AvailableRoom", "AvailableRoom")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO inventory_ManualTanksData" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (ExciseStoreId, P" & _
                "arkId, TankId, RecordTimestamp, ProductId, ProductName, LiquidLevel, TotalObserv" & _
                "ableVolume, ProductLevel, GrossObservableVolume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Obse" & _
                "rvableDensity, GrossStandardVolume, AverageTemperature, NetStandardVolume, Refer" & _
                "enceDensity, WeightInAir, FreeWaterLevel, FreeWaterVolume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                   " & _
                "      LastUpdateTimestamp, ManualSave, WeightInVacuum)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "VALUES        (@ExciseSt" & _
                "oreId,@ParkId,@TankId,@RecordTimestamp,@ProductId,@ProductName,@LiquidLevel,@Tot" & _
                "alObservableVolume,@ProductLevel,@GrossObservableVolume,@ObservableDensity,@Gros" & _
                "sStandardVolume,@AverageTemperature,@NetStandardVolume,@ReferenceDensity,@Weight" & _
                "InAir,@FreeWaterLevel,@FreeWaterVolume,@LastUpdateTimestamp,@ManualSave,@WeightI" & _
                "nVacuum);   " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ExciseStoreId, ParkId, TankId, RecordTimestamp, ProductId, " & _
                "ProductName, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObservableVo" & _
                "lume, ObservableDensity, GrossStandardVolume, AverageTemperature, NetStandardVol" & _
                "ume, ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWaterVolume, LastUpdateT" & _
                "imestamp, ManualSave FROM inventory_ManualTanksData WHERE (RecordTimestamp = @Re" & _
                "cordTimestamp) AND (TankId = @TankId)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExciseStoreId", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ExciseStoreId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParkId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ParkId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TankId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TankId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTimestamp", Global.System.Data.SqlDbType.DateTime2, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductName", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidLevel", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "LiquidLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalObservableVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TotalObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductLevel", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ProductLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossObservableVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "GrossObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservableDensity", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ObservableDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossStandardVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "GrossStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageTemperature", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "AverageTemperature", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NetStandardVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "NetStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceDensity", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ReferenceDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInAir", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "WeightInAir", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterLevel", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "FreeWaterLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "FreeWaterVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateTimestamp", Global.System.Data.SqlDbType.DateTime2, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualSave", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualSave", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInVacuum", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "WeightInVacuum", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE       inventory_ManualTanksData" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET                ExciseStoreId = @Excis" & _
                "eStoreId, ParkId = @ParkId, TankId = @TankId, RecordTimestamp = @RecordTimestamp" & _
                ", ProductId = @ProductId, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         ProductName = @ProductName," & _
                " LiquidLevel = @LiquidLevel, TotalObservableVolume = @TotalObservableVolume, Pro" & _
                "ductLevel = @ProductLevel, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         GrossObservableVolume = @G" & _
                "rossObservableVolume, ObservableDensity = @ObservableDensity, GrossStandardVolum" & _
                "e = @GrossStandardVolume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         AverageTemperature = @Avera" & _
                "geTemperature, NetStandardVolume = @NetStandardVolume, ReferenceDensity = @Refer" & _
                "enceDensity, WeightInAir = @WeightInAir, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         FreeWaterLev" & _
                "el = @FreeWaterLevel, FreeWaterVolume = @FreeWaterVolume, LastUpdateTimestamp = " & _
                "@LastUpdateTimestamp, ManualSave = @ManualSave, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Weigh" & _
                "tInVacuum = @WeightInVacuum, MaxVolume = @MaxVolume, AvailableRoom = @AvailableR" & _
                "oom" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (TankId = @Original_TankId) AND (RecordTimestamp = @Original_R" & _
                "ecordTimestamp);   " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ExciseStoreId, ParkId, TankId, RecordTimestamp, Prod" & _
                "uctId, ProductName, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObser" & _
                "vableVolume, ObservableDensity, GrossStandardVolume, AverageTemperature, NetStan" & _
                "dardVolume, ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWaterVolume, Last" & _
                "UpdateTimestamp, ManualSave FROM inventory_ManualTanksData WHERE (RecordTimestam" & _
                "p = @RecordTimestamp) AND (TankId = @TankId)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExciseStoreId", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ExciseStoreId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParkId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ParkId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TankId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TankId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTimestamp", Global.System.Data.SqlDbType.DateTime2, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductName", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LiquidLevel", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "LiquidLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalObservableVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TotalObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductLevel", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ProductLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossObservableVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "GrossObservableVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ObservableDensity", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ObservableDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GrossStandardVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "GrossStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageTemperature", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "AverageTemperature", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NetStandardVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "NetStandardVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferenceDensity", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ReferenceDensity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInAir", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "WeightInAir", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterLevel", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "FreeWaterLevel", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FreeWaterVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "FreeWaterVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdateTimestamp", Global.System.Data.SqlDbType.DateTime2, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdateTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualSave", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualSave", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeightInVacuum", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "WeightInVacuum", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxVolume", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "MaxVolume", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AvailableRoom", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "AvailableRoom", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TankId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TankId", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordTimestamp", Global.System.Data.SqlDbType.DateTime2, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Phd2SqlInventory.My.MySettings.Default.CollectingPrimaryDataSystemConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ExciseStoreId, ParkId, TankId, RecordTimestamp, ProductId, ProductN" & _
                "ame, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObservableVolume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "                         ObservableDensity, GrossStandardVolume, AverageTemperat" & _
                "ure, NetStandardVolume, ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWater" & _
                "Volume, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         LastUpdateTimestamp, ManualSave, WeightInVacu" & _
                "um, MaxVolume, AvailableRoom" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            inventory_ManualTanksData" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE  " & _
                "      (RecordTimestamp >= @RecordTimestamp)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTimestamp", Global.System.Data.SqlDbType.DateTime2, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTimestamp", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As ServiceDataSet.inventory_ManualTanksDataDataTable, ByVal RecordTimestamp As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RecordTimestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordTimestamp")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RecordTimestamp, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData(ByVal RecordTimestamp As String) As ServiceDataSet.inventory_ManualTanksDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RecordTimestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordTimestamp")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RecordTimestamp, String)
            End If
            Dim dataTable As ServiceDataSet.inventory_ManualTanksDataDataTable = New ServiceDataSet.inventory_ManualTanksDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As ServiceDataSet.inventory_ManualTanksDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As ServiceDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "inventory_ManualTanksData")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal ExciseStoreId As String, _
                    ByVal ParkId As Integer, _
                    ByVal TankId As Integer, _
                    ByVal RecordTimestamp As String, _
                    ByVal ProductId As Global.System.Nullable(Of Integer), _
                    ByVal ProductName As String, _
                    ByVal LiquidLevel As Global.System.Nullable(Of Decimal), _
                    ByVal TotalObservableVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ProductLevel As Global.System.Nullable(Of Decimal), _
                    ByVal GrossObservableVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ObservableDensity As Global.System.Nullable(Of Decimal), _
                    ByVal GrossStandardVolume As Global.System.Nullable(Of Decimal), _
                    ByVal AverageTemperature As Global.System.Nullable(Of Decimal), _
                    ByVal NetStandardVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ReferenceDensity As Global.System.Nullable(Of Decimal), _
                    ByVal WeightInAir As Global.System.Nullable(Of Decimal), _
                    ByVal FreeWaterLevel As Global.System.Nullable(Of Decimal), _
                    ByVal FreeWaterVolume As Global.System.Nullable(Of Decimal), _
                    ByVal LastUpdateTimestamp As String, _
                    ByVal ManualSave As Global.System.Nullable(Of Boolean), _
                    ByVal WeightInVacuum As Global.System.Nullable(Of Decimal)) As Integer
            If (ExciseStoreId Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ExciseStoreId, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ParkId, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TankId, Integer)
            If (RecordTimestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordTimestamp")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RecordTimestamp, String)
            End If
            If (ProductId.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ProductId.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ProductName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ProductName, String)
            End If
            If (LiquidLevel.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LiquidLevel.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TotalObservableVolume.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TotalObservableVolume.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ProductLevel.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ProductLevel.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (GrossObservableVolume.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(GrossObservableVolume.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ObservableDensity.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ObservableDensity.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (GrossStandardVolume.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(GrossStandardVolume.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (AverageTemperature.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(AverageTemperature.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NetStandardVolume.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NetStandardVolume.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ReferenceDensity.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ReferenceDensity.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (WeightInAir.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(WeightInAir.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (FreeWaterLevel.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(FreeWaterLevel.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FreeWaterVolume.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FreeWaterVolume.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (LastUpdateTimestamp Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(LastUpdateTimestamp, String)
            End If
            If (ManualSave.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ManualSave.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (WeightInVacuum.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(WeightInVacuum.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal ExciseStoreId As String, _
                    ByVal ParkId As Integer, _
                    ByVal TankId As Integer, _
                    ByVal RecordTimestamp As String, _
                    ByVal ProductId As Global.System.Nullable(Of Integer), _
                    ByVal ProductName As String, _
                    ByVal LiquidLevel As Global.System.Nullable(Of Decimal), _
                    ByVal TotalObservableVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ProductLevel As Global.System.Nullable(Of Decimal), _
                    ByVal GrossObservableVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ObservableDensity As Global.System.Nullable(Of Decimal), _
                    ByVal GrossStandardVolume As Global.System.Nullable(Of Decimal), _
                    ByVal AverageTemperature As Global.System.Nullable(Of Decimal), _
                    ByVal NetStandardVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ReferenceDensity As Global.System.Nullable(Of Decimal), _
                    ByVal WeightInAir As Global.System.Nullable(Of Decimal), _
                    ByVal FreeWaterLevel As Global.System.Nullable(Of Decimal), _
                    ByVal FreeWaterVolume As Global.System.Nullable(Of Decimal), _
                    ByVal LastUpdateTimestamp As String, _
                    ByVal ManualSave As Global.System.Nullable(Of Boolean), _
                    ByVal WeightInVacuum As Global.System.Nullable(Of Decimal), _
                    ByVal MaxVolume As Global.System.Nullable(Of Decimal), _
                    ByVal AvailableRoom As Global.System.Nullable(Of Decimal), _
                    ByVal Original_TankId As Integer, _
                    ByVal Original_RecordTimestamp As String) As Integer
            If (ExciseStoreId Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ExciseStoreId, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ParkId, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TankId, Integer)
            If (RecordTimestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordTimestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RecordTimestamp, String)
            End If
            If (ProductId.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ProductId.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ProductName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ProductName, String)
            End If
            If (LiquidLevel.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LiquidLevel.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TotalObservableVolume.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TotalObservableVolume.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ProductLevel.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ProductLevel.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (GrossObservableVolume.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(GrossObservableVolume.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ObservableDensity.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ObservableDensity.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (GrossStandardVolume.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(GrossStandardVolume.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (AverageTemperature.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(AverageTemperature.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NetStandardVolume.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NetStandardVolume.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ReferenceDensity.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ReferenceDensity.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (WeightInAir.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(WeightInAir.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (FreeWaterLevel.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(FreeWaterLevel.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FreeWaterVolume.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(FreeWaterVolume.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (LastUpdateTimestamp Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(LastUpdateTimestamp, String)
            End If
            If (ManualSave.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ManualSave.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (WeightInVacuum.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(WeightInVacuum.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MaxVolume.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(MaxVolume.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (AvailableRoom.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(AvailableRoom.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_TankId, Integer)
            If (Original_RecordTimestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RecordTimestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_RecordTimestamp, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal ExciseStoreId As String, _
                    ByVal ParkId As Integer, _
                    ByVal ProductId As Global.System.Nullable(Of Integer), _
                    ByVal ProductName As String, _
                    ByVal LiquidLevel As Global.System.Nullable(Of Decimal), _
                    ByVal TotalObservableVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ProductLevel As Global.System.Nullable(Of Decimal), _
                    ByVal GrossObservableVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ObservableDensity As Global.System.Nullable(Of Decimal), _
                    ByVal GrossStandardVolume As Global.System.Nullable(Of Decimal), _
                    ByVal AverageTemperature As Global.System.Nullable(Of Decimal), _
                    ByVal NetStandardVolume As Global.System.Nullable(Of Decimal), _
                    ByVal ReferenceDensity As Global.System.Nullable(Of Decimal), _
                    ByVal WeightInAir As Global.System.Nullable(Of Decimal), _
                    ByVal FreeWaterLevel As Global.System.Nullable(Of Decimal), _
                    ByVal FreeWaterVolume As Global.System.Nullable(Of Decimal), _
                    ByVal LastUpdateTimestamp As String, _
                    ByVal ManualSave As Global.System.Nullable(Of Boolean), _
                    ByVal WeightInVacuum As Global.System.Nullable(Of Decimal), _
                    ByVal MaxVolume As Global.System.Nullable(Of Decimal), _
                    ByVal AvailableRoom As Global.System.Nullable(Of Decimal), _
                    ByVal Original_TankId As Integer, _
                    ByVal Original_RecordTimestamp As String) As Integer
            Return Me.Update(ExciseStoreId, ParkId, Original_TankId, Original_RecordTimestamp, ProductId, ProductName, LiquidLevel, TotalObservableVolume, ProductLevel, GrossObservableVolume, ObservableDensity, GrossStandardVolume, AverageTemperature, NetStandardVolume, ReferenceDensity, WeightInAir, FreeWaterLevel, FreeWaterVolume, LastUpdateTimestamp, ManualSave, WeightInVacuum, MaxVolume, AvailableRoom, Original_TankId, Original_RecordTimestamp)
        End Function
    End Class

    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & _
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")> _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component

        Private _updateOrder As UpdateOrderOption

        Private _inventory_TanksDataTableAdapter As inventory_TanksDataTableAdapter

        Private _inventory_ManualTanksDataTableAdapter As inventory_ManualTanksDataTableAdapter

        Private _backupDataSetBeforeUpdate As Boolean

        Private _connection As Global.System.Data.IDbConnection

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set(value As UpdateOrderOption)
                Me._updateOrder = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
            "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property inventory_TanksDataTableAdapter() As inventory_TanksDataTableAdapter
            Get
                Return Me._inventory_TanksDataTableAdapter
            End Get
            Set(value As inventory_TanksDataTableAdapter)
                Me._inventory_TanksDataTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
            "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property inventory_ManualTanksDataTableAdapter() As inventory_ManualTanksDataTableAdapter
            Get
                Return Me._inventory_ManualTanksDataTableAdapter
            End Get
            Set(value As inventory_ManualTanksDataTableAdapter)
                Me._inventory_ManualTanksDataTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set(value As Boolean)
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._inventory_TanksDataTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._inventory_TanksDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._inventory_TanksDataTableAdapter.Connection
                End If
                If ((Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._inventory_ManualTanksDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._inventory_ManualTanksDataTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set(value As Global.System.Data.IDbConnection)
                Me._connection = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._inventory_TanksDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property

        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateUpdatedRows(ByVal dataSet As ServiceDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._inventory_TanksDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.inventory_TanksData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._inventory_TanksDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.inventory_ManualTanksData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._inventory_ManualTanksDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateInsertedRows(ByVal dataSet As ServiceDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._inventory_TanksDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.inventory_TanksData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._inventory_TanksDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.inventory_ManualTanksData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._inventory_ManualTanksDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateDeletedRows(ByVal dataSet As ServiceDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.inventory_ManualTanksData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._inventory_ManualTanksDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._inventory_TanksDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.inventory_TanksData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._inventory_TanksDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing) _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing) _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = False) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function

        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function UpdateAll(ByVal dataSet As ServiceDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = False) Then
                Return 0
            End If
            If ((Not (Me._inventory_TanksDataTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._inventory_TanksDataTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                        "tring.")
            End If
            If ((Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._inventory_ManualTanksDataTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" & _
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = False
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken) _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close()
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open()
                workConnOpened = True
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" & _
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try
                '---- Prepare for update -----------
                '
                If (Not (Me._inventory_TanksDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._inventory_TanksDataTableAdapter, Me._inventory_TanksDataTableAdapter.Connection)
                    Me._inventory_TanksDataTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._inventory_TanksDataTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._inventory_TanksDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._inventory_TanksDataTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._inventory_TanksDataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._inventory_ManualTanksDataTableAdapter, Me._inventory_ManualTanksDataTableAdapter.Connection)
                    Me._inventory_ManualTanksDataTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._inventory_ManualTanksDataTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._inventory_ManualTanksDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._inventory_ManualTanksDataTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._inventory_ManualTanksDataTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit()
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback()
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear()
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges()
                            row.SetAdded()
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close()
                End If
                If (Not (Me._inventory_TanksDataTableAdapter) Is Nothing) Then
                    Me._inventory_TanksDataTableAdapter.Connection = CType(revertConnections(Me._inventory_TanksDataTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._inventory_TanksDataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._inventory_ManualTanksDataTableAdapter) Is Nothing) Then
                    Me._inventory_ManualTanksDataTableAdapter.Connection = CType(revertConnections(Me._inventory_ManualTanksDataTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._inventory_ManualTanksDataTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = True
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return True
            End If
            If ((Me.Connection Is Nothing) _
                        OrElse (inputConnection Is Nothing)) Then
                Return True
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return True
            End If
            Return False
        End Function

        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Enum UpdateOrderOption

            InsertUpdateDelete = 0

            UpdateInsertDelete = 1
        End Enum

        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

            Private _relation As Global.System.Data.DataRelation

            Private _childFirst As Integer

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New()
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing) _
                            AndAlso (traversedRows.ContainsKey(parent) = False))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear()
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing) _
                                AndAlso (traversedRows.ContainsKey(parent) = False))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing) _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
