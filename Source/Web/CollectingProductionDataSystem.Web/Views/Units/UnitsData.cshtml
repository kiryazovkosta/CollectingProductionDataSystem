@using CollectingProductionDataSystem.Web.ViewModels.Units;
@using Kendo.Mvc.UI;

@{
    ViewBag.Title = "UnitsData";
    Layout = "~/Views/Shared/_KendoLayout.cshtml";
}

<h2>UnitsData</h2>

@Html.AntiForgeryToken()
@(Html.Kendo()
    .Grid<UnitDataViewModel>()
    .Name("units")
      .Columns(
           columns =>
           {
               columns.Bound(c => c.Code).Width(100);
               columns.Bound(c => c.ProcessUnitName).Width(100);
               columns.Bound(c => c.Name);
               columns.Bound(c => c.Position).Width(140);
               columns.Bound(c => c.MeasureUnit).Width(80);
               columns.Bound(c => c.CollectingDataMechanism).Width(80);
               columns.Bound(c => c.AutomaticValue).Width(140);
               columns.Bound(c => c.ManualValue).Width(140);
               columns.Bound(c => c.EditReason).Width(140).ClientTemplate("<div class=row><div class='col-xs-2 no-horisontal-padding'><div class='#:EditReason.Id == 0? 'bg-ok':'bg-warning'#'></div></div><div class='col-xs-5 no-horisontal-padding'>#:EditReason.Name#</div></div>");
               columns.Command(c => c.Edit());
           })
      .Sortable()
      .Scrollable(scr => scr.Height(660))
      .Filterable()
      .Editable(editable => editable.Mode(GridEditMode.InLine))//.TemplateName("_EditUnit").Window(window => window.Width(650).Scrollable(false)))
      .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(true)
        .Read(read => read.Action("ReadUnitsData", "Units", new { area = "" })
                .Data("sendDate"))
           .Update(update => update.Action("Edit", "Units", new { area = "" }).Data("sendAntiForgery"))
           .Model(model => {
               model.Id(p => p.Id);
               model.Field(p => p.Code).Editable(false);
               model.Field(p => p.ProcessUnitName).Editable(false);
               model.Field(p => p.Name).Editable(false);
               model.Field(p => p.Position).Editable(false);
               model.Field(p => p.MeasureUnit).Editable(false);
               model.Field(p => p.CollectingDataMechanism).Editable(false);
               model.Field(p => p.AutomaticValue).Editable(false);
               model.Field(p => p.ManualValue).Editable(true);
               model.Field(p => p.EditReason).Editable(true);
           })
           .Events(events=>{
               events.Error("error_handler");
           })
      )
)
@section scripts{
    <script src="~/Scripts/custom/sendAntiForgery.js"></script>
    <script>
        kendo.culture("@System.Threading.Thread.CurrentThread.CurrentCulture.Name");

        var sendDate = function () {
            var result = { "date": $('input[name=date]').val() };
            $.extend(result, sendAntiForgery());
            return result;
        }

        function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }

        function recordTimeStampFilter(element) {
            element.kendoDateTimePicker();
        }

        $(document).ready(function () {
            $("#apply").click(function () {
                var grid = $("#tanks").data("kendoGrid");
                grid.dataSource.read();
                grid.refresh();
            });
        });

    </script>
}
