@using System.Web.Optimization;
@using CollectingProductionDataSystem.Web.Infrastructure.Helpers;
@using CollectingProductionDataSystem.Web.Areas.DailyReporting.ViewModels;
@using Resources = App_GlobalResources.Resources;
@model TanksStatusesViewModel
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}
<div class="row">
    <div class="col-md-10">
        <h2>@Resources.Layout.TanksStatusesData</h2>
    </div>
    <div class="col-md-2">
        <button id="excel-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
    </div>
</div>
@Html.ValidationSummary()
@Html.AntiForgeryToken()

@(Html.Kendo()
    .Grid<TanksStatusesViewModel>()
    .Name("units")
    .AutoBind(false)
    .Columns(
        columns =>
        {
            columns.Bound(c => c.Id);
            columns.Bound(c => c.RecordTimestamp);
            columns.Bound(c => c.ParkName);
            columns.Bound(c => c.TankName);
            //columns.Bound(c => c.TankStatusData.TankStatus);
        })
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(new[] { 10, 20, 50, 100 })
            .ButtonCount(5)
        )
        //.Editable(editable => editable.Mode(GridEditMode.InLine))
        .Sortable()
        .Excel(excel => excel
        .FileName(@Resources.Layout.UnitsDailyData + "_" + DateTime.Now + ".xlsx")
        .Filterable(true)
        .ProxyURL(Url.Action("Excel_Export_Save", "Ajax", new { area = "" }))
        .AllPages(true))
        .Events(ev => ev.DataBound("unitGridsData.DataBound"))
        .Scrollable(scr => scr.Height(640))
        .Filterable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(50)
            .ServerOperation(true)
            .Read(read => read.Action("ReadTanksStatusesData", "TanksStatuses", new { area = "DailyReporting" }).Data("unitGridsData.SendTanksData"))
            .Model(model =>
            {
                model.Id(p => p.Id);
                model.Field(c => c.ParkName).Editable(false);
                model.Field(p => p.TankName).Editable(false);
            })
            .Events(events =>
            {
                events.Error("kendoAdditional.ErrorHandler");
                //events.RequestEnd("unitGridsData.DataSave");
            })
        )
    )

@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none">@Html.Partial("_KendoGridErrorWindow")</div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>

@section scripts{
    @Scripts.Render("~/bundles/custom/kendoadditional")
    @Scripts.Render("~/bundles/custom/unitGrids")
    @Scripts.Render("~/bundles/custom/renderMaterialGraphic")
    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")
}
@section sidebar{
    @Html.Partial("_TanksSideBarByDate")
}