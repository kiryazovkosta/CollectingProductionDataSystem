@using System.Web.Optimization;
@using CollectingProductionDataSystem.Web.Areas.ShiftReporting.ViewModels;
@using CollectingProductionDataSystem.Web.Infrastructure.Helpers;
@using CollectingProductionDataSystem.Web.ViewModels.Units;
@using Resources = App_GlobalResources.Resources;

@model UnitDailyDataViewModel
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}

<div class="row">
    <div class="col-md-10">
        <h2>@Resources.Layout.UnitsDailyData</h2>
    </div>
    <div class="col-md-2">
        <button id="excel-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
    </div>
</div>
@Html.ValidationSummary()
@Html.AntiForgeryToken()
<div class="row">
    <div class="col-lg-4 col-lg-push-8">
        @(Html.Kendo()
        .Grid<ProductionPlanViewModel>()
        .Name("productionPlan")
        .AutoBind(false)
        .Columns(
            columns =>
            {
                columns.Bound("Name").Title("Продукт");
                columns.Bound("Percentages").Title("%").Format("{0:n2}").Width(65);
                columns.Bound("QuantityPlan").Title("Колич. (план T)").Format("{0:n2}").Width(90);
                columns.Bound("QuantityFact").Title("Колич. (факт T)").Format("{0:n2}").Width(90);

            })
    .Scrollable(scr => scr.Height(350))
    .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(true)
        //    .Group(group => group.Add(c => c.UnitsDailyConfig.ProductType.Sort))
        .Read(read => read.Action("ReadProductionPlanData", "Ajax", new { area = "DailyReporting" }).Data("sendDate"))
        .Model(model =>
        {
            model.Id(p => p.Id);
            model.Field(p => p.Name).Editable(false);
            model.Field(p => p.Percentages).Editable(false);
            model.Field(p => p.QuantityPlan).Editable(false);
            model.Field(p => p.QuantityFact).Editable(false);
        })
        .Events(events =>
        {
            events.Error("error_handler");
        })
    )
       .Events(ev => ev.DataBound("dataBound"))
        )
    </div>

    <div class="col-lg-8 col-lg-pull-4">
        @(Html.Kendo()
    .Grid<UnitDailyDataViewModel>()
    .Name("units")
    .AutoBind(false)
    .Columns(
        columns =>
        {
            columns.Bound(c => c.UnitsDailyConfig.Code)
                .Template(@<text></text>)
                .ClientTemplate(Html.AuthorizedActionLinkOrText("#=data.UnitsDailyConfig.Code#", "Index", "History", new { area = "RecordsHistory", id = "#=data.id#", entityName = "UnitsDailyData" }, null)
                .ToHtmlString())
                .Width(77);
            columns.Bound(c => c.UnitsDailyConfig.DailyProductType.Sort).Hidden(true).ClientGroupHeaderTemplate("#=value#");
            columns.Bound(c => c.UnitsDailyConfig.ProcessUnit.ShortName).Width(100);
            columns.Bound(c => c.UnitsDailyConfig.Name);
            columns.Bound(c => c.UnitsDailyConfig.MeasureUnit.Code).Width(80);
            columns.Bound(c => c.Value).Width(100).Format("{0:n2}");
            columns.Bound(c => c.UnitsManualDailyData.Value)
                .Template(@<text></text>)
                .ClientTemplate(Html.AuthorizedActionLinkOrText("#=data.UnitsManualDailyData.Value#", "Index", "History", new { area = "RecordsHistory", id = "#=data.id#", entityName = "UnitsManualDailyData" }, null)
                .ToHtmlString())
                .Width(100)
                .Format("{0:n2}");
            columns.Bound(c => c.UnitsManualDailyData.EditReason).Width(180).ClientTemplate("#:UnitsManualDailyData.EditReason.Name#")
                .ClientTemplate("<div class=row><div class='col-xs-2 no-horisontal-padding'><div class='#:UnitsManualDailyData.EditReason.Id == 0? 'bg-ok':'bg-warning'#'></div></div><div class='col-xs-9 no-horisontal-padding reason'>#:UnitsManualDailyData.EditReason.Name#</div></div>");
            columns.Bound(c => c.IsEditable).Visible(false);
            columns.Command(c => c.Edit()).Width(170);
        })
                                                            .Pageable(pageable => pageable
                                                                .Refresh(true)
                                                                .PageSizes(new[] { 10, 20, 50, 100 })
                                                                .ButtonCount(5)
                                                            )
                                                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                            .Sortable()
                                                             .Excel(excel => excel
                                                                .FileName(@Resources.Layout.UnitsDailyData + "_" + DateTime.Now + ".xlsx")
                                                                .Filterable(true)
                                                                .ProxyURL(Url.Action("Excel_Export_Save", "Tests", new { area = "" }))
                                                                .AllPages(true))
                                                                .Events(ev => ev.DataBound("dataBound"))
                                                                .Scrollable(scr => scr.Height(640))
                                                                .Filterable()
                                                                .ClientDetailTemplateId("template")
                                                                .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .PageSize(50)
                                                                .ServerOperation(true)
                                                                .Group(group => group.Add(c => c.UnitsDailyConfig.DailyProductType.Sort))
                                                                .Read(read => read.Action("ReadDailyUnitsData", "UnitsDaily", new { area = "DailyReporting" }).Data("sendDate"))
                                                                .Update(update => update.Action("Edit", "UnitsDaily", new { area = "DailyReporting" }).Data("sendAntiForgery"))
                                                                .Model(model =>
                                                                {
                                                                    model.Id(p => p.Id);
                                                                    model.Field(p => p.UnitsDailyConfig.Code).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.DailyProductType.Name).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.ProcessUnit.ShortName).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.Name).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.MeasureUnit.Code).Editable(false);
                                                                    model.Field(p => p.Value).Editable(false);
                                                                    model.Field(p => p.UnitsManualDailyData.Value).Editable(true);
                                                                    model.Field(p => p.UnitsManualDailyData.EditReason).Editable(true);
                                                                })
                                                                .Events(events =>
                                                                {
                                                                    events.Error("error_handler");
                                                                    events.RequestEnd("dataSave");
                                                                })
                                                            )
)
    </div>
</div>



@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none">@Html.Partial("_KendoGridErrorWindow")</div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<UnitDataViewModel>()
            .Name("details_#=Id#") // template expression, to be evaluated in the master context
            .Columns(
                columns =>
                {
                    columns.Bound(c => c.UnitConfig.Code).Width(77);
                    columns.Bound(c => c.UnitConfig.ProcessUnit.ShortName).Width(100);
                    columns.Bound(c => c.UnitConfig.Name);
                    columns.Bound(c => c.UnitConfig.Position).Width(140);
                    columns.Bound(c => c.UnitConfig.MeasureUnit.Code).Width(80);
                    columns.Bound(c => c.UnitConfig.CollectingDataMechanism).Width(30).Title(string.Empty);
                    columns.Bound(c => c.Value).Width(100).Format("{0:n2}");
                    columns.Bound(c => c.UnitsManualData.Value).Width(100).Format("{0:n2}");
                    columns.Bound(c => c.UnitsManualData.EditReason).Width(200).ClientTemplate("\\#:UnitsManualData.EditReason.Name\\#")
                        .ClientTemplate("<div class=row><div class='col-xs-2 no-horisontal-padding'><div class='\\#:UnitsManualData.EditReason.Id == 0? 'bg-ok':'bg-warning'\\#'></div></div><div class='col-xs-9 no-horisontal-padding reason'>\\#:UnitsManualData.EditReason.Name\\#</div></div>");
                    columns.Bound(c => c.Shift).Hidden(true).ClientGroupHeaderTemplate(@Resources.Layout.Shift + " \\#=value\\#");
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    //.PageSize(100)
                    .ServerOperation(true)
                    .Group(group => group.Add(c => c.Shift))
                    .Read(read => read.Action("ReadDetails", "Ajax", new { area = "DailyReporting", recordId = "#=Id#" }).Data("sendAntiForgery"))
                            .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.UnitConfig.Code).Editable(false);
                    model.Field(p => p.UnitConfig.ShiftProductType.Name).Editable(false);
                    model.Field(p => p.UnitConfig.ProcessUnit.ShortName).Editable(false);
                    model.Field(p => p.UnitConfig.Name).Editable(false);
                    model.Field(p => p.UnitConfig.Position).Editable(false);
                    model.Field(p => p.UnitConfig.MeasureUnit.Code).Editable(false);
                    model.Field(p => p.UnitConfig.CollectingDataMechanism).Editable(false);
                    model.Field(p => p.Value).Editable(false);
                    model.Field(p => p.UnitsManualData.Value).Editable(false);
                    model.Field(p => p.UnitsManualData.EditReason).Editable(false);
                })
                )
                .ToClientTemplate()
    )
</script>

@section scripts{
    @Scripts.Render("~/bundles/custom/kendoadditional")
    @Scripts.Render("~/bundles/custom/unitGrids")
}
@section sidebar{
    @Html.Partial("_UnitsDailySideBar")
}