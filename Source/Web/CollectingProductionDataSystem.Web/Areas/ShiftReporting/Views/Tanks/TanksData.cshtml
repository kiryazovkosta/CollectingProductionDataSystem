@using System.Web.Optimization;
@using CollectingProductionDataSystem.Web.ViewModels.Tank;
@using Resources = App_GlobalResources.Resources;
@model TankDataViewModel
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}
<div class="row">
    <div class="col-md-10">
        <h2>@Resources.Layout.TanksData</h2>
    </div>
    <div class="col-md-2">
        <button id="excel-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
    </div>
</div>

@Html.ValidationSummary()
@Html.AntiForgeryToken()
@(Html.Kendo().Grid<TankDataViewModel>()
        .Name("tanks")
        .AutoBind(false)
        .Columns(columns =>
            {
                columns.Bound(c => c.RecordTimestamp).Format("{0:dd.MM.yyyy HH:mm}");
                columns.Bound(c => c.ParkName);
                columns.Bound(c => c.TankName);
                columns.Bound(c => c.ProductName);
                columns.Bound(c => c.LiquidLevel).Format("{0:n2}");
                columns.Bound(c => c.ProductLevel).Format("{0:n2}");
                columns.Bound(c => c.NetStandardVolume).Format("{0:n2}");
                columns.Bound(c => c.ReferenceDensity).Format("{0:n2}");
                columns.Bound(c => c.WeightInVacuum).Format("{0:n2}");
                columns.Bound(c => c.FreeWaterLevel).Format("{0:n2}");
            })
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(new[] { 10, 20, 50, 100 })
        .ButtonCount(5))
        .Sortable()
        .Excel(excel => excel
            .FileName(@Resources.Layout.TanksData + "_" + DateTime.Now + ".xlsx")
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export_Save", "Tests", new { area = "" }))
            .AllPages(true)
        )
        .Scrollable(scr => scr.Height(660))
        .Filterable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .ServerOperation(true)
            .Read(read => read.Action("ReadTanksData", "Tanks", new { area = "ShiftReporting" }).Data("sendDate"))
            //.Update(update => update.Action("Edit", "Tanks", new { area = "ShiftReporting" }).Data("sendAntiForgery"))
            //.Model(model =>
            //{
            //    model.Id(p => p.Id);
            //    model.Field(p => p.RecordTimestamp).Editable(false);
            //    model.Field(p => p.ParkName).Editable(false);
            //    model.Field(p => p.TankName).Editable(false);
            //    model.Field(p => p.ProductName).Editable(false);
            //    model.Field(p => p.LiquidLevel).Editable(true);
            //    model.Field(p => p.ProductLevel).Editable(true);
            //    model.Field(p => p.NetStandardVolume).Editable(true);
            //    model.Field(p => p.ReferenceDensity).Editable(true);
            //    model.Field(p => p.WeightInVacuum).Editable(true);
            //    model.Field(p => p.FreeWaterLevel).Editable(true);
            //    model.Field(p => p.TanksManualData.EditReason).Editable(true);
            //})
        .Events(events =>
        {
            events.Error("error_handler");
        }))

)

@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none">@Html.Partial("_KendoGridErrorWindow")</div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>

@section scripts{
    <script src="~/Scripts/custom/sendAntiForgery.js"></script>
    <script>
        kendo.culture("@System.Threading.Thread.CurrentThread.CurrentCulture.Name");

        function sendZoneId() {
            return { "parkId": $('input[name=parks]').val() }
        }

        function sendShiftsOffset() {
            return { "shiftMinutesOffset": $('input[name=shifts]').val() }
        }

        function sendAntiForgery() {
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        var sendDate = function () {
            var result = { "date": $('input[name=date]').val() };
            $.extend(result, sendZoneId());
            $.extend(result, sendShiftsOffset());
            $.extend(result, sendAntiForgery());
            return result;
        }

        function error_handler(e) {
            if (e.errors) {
                var message = "";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                $('pre#err-message').text(message);
                $('div#err-window').data("kendoWindow").open();
            }
        }

        function closeWindow(selector) {
            $(selector).data("kendoWindow").close();
        }

        function recordTimeStampFilter(element) {
            element.kendoDateTimePicker();
        }

        $(document).ready(function () {
            $("#apply").click(function () {
                var grid = $("#tanks").data("kendoGrid");
                grid.dataSource.read();
                grid.refresh();

                //checkConfirmedStatus();
                //grid.dataSource.fetch(function () {
                //    var totalRows = grid.dataSource.total();
                //    if (totalRows === 0) {
                //        hideCommandButtons();
                //    }
                //});
            });

            prepareWindow();
            prepareSuccessWindow();
            //nameGridCommancolumn();
            //hideCommandButtons();
            AttachEventToExportBtn("#excel-export", "#tanks");

            //$("#confirm").click(function () {
            //    var date = sendDate();
            //    $.ajax({
            //        url: 'Confirm',
            //        type: 'POST',
            //        data: date,
            //        success: function (data) {
            //            var confirmed = data.IsConfirmed;
            //            if (confirmed === true) {
            //                hideCommandButtons();
            //                var message = "Вие потвърдихте отчета успешно."
            //                $('pre#succ-message').text(message);
            //                $('div#success-window').data("kendoWindow").open();

            //            } else {
            //                if (data.errors) {
            //                    var errorMessage = "";
            //                    $.each(data.errors, function (key, value) {
            //                        if ('errors' in value) {
            //                            $.each(value.errors, function () {
            //                                errorMessage += this + "\n";
            //                            });
            //                        }
            //                    });
            //                    $('pre#err-message').text(errorMessage);
            //                    $('div#err-window').data("kendoWindow").open();
            //                }
            //                showCommandButtons();
            //            }
            //        },
            //        error: function (data) {
            //            var errorMessage = "";
            //            var response = JSON.parse(data.responseText).data;
            //            $.each(response.errors, function (key, value) {
            //                errorMessage += this + "\n";
            //            });
            //            $('pre#err-message').text(errorMessage);
            //            $('div#err-window').data("kendoWindow").open();
            //        }
            //    });
            //});
        });

        function prepareWindow() {
            var window = $('div#err-window')
            window.kendoWindow({
                width: "650px",
                title: "Възникна грешка в приложението",
                actions: ["Close"],
                modal: true,
                position: {
                    top: "30%", // or "100px"
                    left: "30%"
                },
                minHeight: 100,
                maxHeight: 350
            });
        }

        function prepareSuccessWindow() {
            var window = $('div#success-window')
            window.kendoWindow({
                width: "650px",
                title: "Успешна операция",
                actions: ["Close"],
                modal: true,
                position: {
                    top: "30%", // or "100px"
                    left: "30%"
                },
                minHeight: 100,
                maxHeight: 350
            });
        }

        //function hideCommandButtons() {
        //    $("#confirm").hide();
        //    $("#tanks").data("kendoGrid").hideColumn('commands');
        //}

        //function showCommandButtons() {
        //    $("#confirm").show();
        //    $("#tanks").data("kendoGrid").showColumn('commands');
        //}

        //function checkConfirmedStatus() {
        //    var date = sendDate();
        //    $.ajax({
        //        url: 'IsConfirmed',
        //        type: 'POST',
        //        data: date,
        //        success: function (result) {
        //            var confirmed = result.IsConfirmed;
        //            if (confirmed === false) {
        //                showCommandButtons();
        //            } else {
        //                hideCommandButtons();
        //            }
        //        },
        //        error: function (result) {
        //            hideCommandButtons();
        //        }
        //    });
        //}

        function AttachEventToExportBtn(buttonSelector, targetSelector) {
            $(buttonSelector).click(function () {
                $(targetSelector).data("kendoGrid").saveAsExcel();
            });
        }

        var dataBound = function () {
            dataView = this.dataSource.view();
            for (var i = 0; i < dataView.length; i++) {
                for (var j = 0; j < dataView[i].items.length; j++) {

                    if (dataView[i].items[j].HasManualData === true) {
                        var uid = dataView[i].items[j].uid;
                        $("#" + $(this.element).attr('id') + " tbody").find("tr[data-uid=" + uid + "]").addClass("bg-danger");
                    }
                }
            }
        }

        //nameGridCommancolumn = function () {
        //    var grid = $("#tanks").data("kendoGrid");
        //    if (grid) {
        //        $.each(grid.columns, function (index, value) {
        //            if (!this.field) {
        //                this.field = "commands";
        //            }
        //        });
        //    }
        //}

    </script>
}

@section sidebar{
    @Html.Partial("_TanksSideBar")
}