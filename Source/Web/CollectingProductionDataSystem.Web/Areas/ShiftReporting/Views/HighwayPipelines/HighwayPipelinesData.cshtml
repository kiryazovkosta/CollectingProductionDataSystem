@using CollectingProductionDataSystem.Web.Areas.ShiftReporting.ViewModels;
@using CollectingProductionDataSystem.Web.Infrastructure.Helpers;
@using Resources = App_GlobalResources.Resources;
@model HighwayPipelinesDataViewModel
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}
<div class="row">
    <div class="col-md-10">
        <h2>@Resources.Layout.HighwayPipelinesData</h2>
    </div>
    <div class="col-md-2">
        <button id="excel-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
    </div>
</div>
@Html.ValidationSummary()
@Html.AntiForgeryToken()
<div class="row">
    <div class="col-lg-12 col">
        @(Html.Kendo().Grid<HighwayPipelinesDataViewModel>()
        .Name("highwaypipelines")
        .AutoBind(false)
        .Columns(columns =>
            {
                columns.Bound(c => c.HighwayPipelineConfigName);
                columns.Bound(c => c.ProductName);
                columns.Bound(c => c.Sort).ClientGroupHeaderTemplate("#=value.substr(3,value.length-3)#");
                columns.Bound(c => c.ProductCode).Format("{0:000}");
                columns.Bound(c => c.Volume)
                    .ClientTemplate(string.Format("{0}{2}{1}", "<div style='text-align:right;'>", "</div>",
                        Ajax.AuthorizedAjaxActionLinkOrText("#=kendo.toString(data.Volume,'n3')#", "Index", "History",
                                                new AjaxOptions() { HttpMethod = "Get", OnSuccess = "showRecordHistoriModal" },
                                                new { area = "RecordsHistory", id = "#=data.id#", entityName = "HighwayPipelineData" },
                                                new { data_ajax_mode = "replace", data_ajax_update = @"\#modal-dialog-body" })
                                                .ToHtmlString()));
                columns.Bound(c => c.Mass)
                    .ClientTemplate(string.Format("{0}{2}{1}", "<div style='text-align:right;'>", "</div>",
                        Ajax.AuthorizedAjaxActionLinkOrText("#=kendo.toString(data.Mass,'n3')#", "Index", "History",
                                                new AjaxOptions() { HttpMethod = "Get", OnSuccess = "showRecordHistoriModal" },
                                                new { area = "RecordsHistory", id = "#=data.id#", entityName = "HighwayPipelineData" },
                                                new { data_ajax_mode = "replace", data_ajax_update = @"\#modal-dialog-body" })
                                                .ToHtmlString()));
                columns.Command(c => c.Edit()).Width(170);
            })
        //.Pageable(pageable => pageable
        //    .Refresh(true)
        //.   PageSizes(new[] { 10, 20, 50, 100 })
        //    .ButtonCount(5))
        .Sortable()
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .Excel(excel => excel
            .FileName(@Resources.Layout.HighwayPipelinesData + "_" + DateTime.Now + ".xlsx")
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export_Save", "Ajax", new { area = "" }))
            .AllPages(true)
        )
        .Scrollable(scr => scr.Height(660))
        .Events(ev => ev.DataBound("unitGridsData.DataBound"))
        .Filterable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(50)
            .ServerOperation(true)
            .Group(group => group.Add(c => c.Sort))
            .Read(read => read.Action("ReadHighwayPipelinesData", "HighwayPipelines", new { area = "ShiftReporting" }).Data("unitGridsData.SendDate"))
            .Update(update => update.Action("Edit", "HighwayPipelines", new { area = "ShiftReporting" }).Data("sendAntiForgery"))
            .Model(model =>
            {
                model.Id(p => p.Id);
                model.Field(p => p.HighwayPipelineConfigName).Editable(false);
                model.Field(p => p.ProductName).Editable(false);
                model.Field(p => p.ProductCode).Editable(false);
                model.Field(p => p.Volume);
                model.Field(p => p.Mass);
            })
        .Events(events =>
        {
            events.Error("kendoAdditional.ErrorHandler");
        }))

        )
    </div>
</div>
@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none">@Html.Partial("_KendoGridErrorWindow")</div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>
@section scripts{
    @Scripts.Render("~/bundles/custom/kendoadditional")
    @Scripts.Render("~/bundles/custom/unitGrids")
    @Scripts.Render("~/Scripts/custom/renderDailyGraphic.min.js")
    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")
}
@section sidebar{
    @Html.Partial("_HighwayPipelinesSideBar")
}