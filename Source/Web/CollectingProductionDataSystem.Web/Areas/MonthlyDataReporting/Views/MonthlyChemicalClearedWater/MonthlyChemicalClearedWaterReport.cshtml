@using System.Web.Optimization;
@using CollectingProductionDataSystem.Constants;
@using CollectingProductionDataSystem.Web.Areas.MonthlyDataReporting.Models;
@using CollectingProductionDataSystem.Web.Infrastructure.Helpers;
@using Resources = App_GlobalResources.Resources;
@model DateTime?
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}
<div class="row">
    <div class="col-md-10">
        <h2>@Resources.Layout.UnitMonthlyCCWData</h2>
    </div>
    <div class="col-md-2">
        <button id="excel-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
    </div>
</div>
@Html.Hidden("monthlyReportTypeId", CommonConstants.ChemicalClearedWater)
@Html.ValidationSummary()
@Html.AntiForgeryToken()
@(Html.Kendo()
    .Grid<MonthlyReportTableReportViewModel>()
    .Name("monthly-recalc-data-report")
    .AutoBind(false)
    .Columns(
        columns =>
        {
            columns.Bound(c => c.UnitMonthlyConfig.Code)
                .ClientTemplate(
                    Ajax.AuthorizedAjaxActionLinkOrText("#=data.UnitMonthlyConfig.Code#", "Index", "History",
                        new AjaxOptions() { HttpMethod = "Get", OnSuccess = "showRecordHistoriModal" },
                        new { area = "RecordsHistory", id = "#=data.id#", entityName = "UnitMonthlyData" },
                        new { data_ajax_mode = "replace", data_ajax_update = @"\#modal-dialog-body" })
                        .ToHtmlString())
                .Width(100);
            columns.Bound(c => c.UnitMonthlyConfig.ProcessUnit.Factory.FactorySortableName).Hidden(true).ClientGroupHeaderTemplate("Производство #=value.substr(3,value.length-3)#").Width(10);
            columns.Bound(c => c.UnitMonthlyConfig.ProductType.SortableName).Hidden(true).ClientGroupHeaderTemplate("#=value.substr(" + (FieldLength.DptSortableNameLength + 1) + ",value.length-" + (FieldLength.DptSortableNameLength + 1) + ")#");
            columns.Bound(c => c.UnitMonthlyConfig.ProcessUnit.ShortName).Width(160);
            columns.Bound(c => c.UnitMonthlyConfig.Name).Width(400);
            columns.Bound(c => c.UnitMonthlyConfig.MeasureUnit.Code).Width(80);
            columns.Bound(c => c.RealValue).ClientTemplate("<div style='text-align:right;'>#=data.RelativeDifference==null?'':kendo.toString(data.RealValue, '\\#\\#.\\#\\#\\#\\#\\#')#</div>");
            columns.Bound(c => c.RecalculationPercentage).ClientTemplate("<div style='text-align:right;'>#=data.RecalculationPercentage==null?'':kendo.toString(data.RecalculationPercentage, '\\#\\#.\\#\\#\\#\\#\\#')#%</div>");
            columns.Bound(c => c.TotalValue).ClientTemplate("<div style='text-align:right;'>#=data.TotalValue==null?'':kendo.toString(data.TotalValue, '\\#\\#.\\#\\#\\#\\#\\#')#</div>");
        })
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(false)
            .Numeric(false)
            .PreviousNext(false)
        )
        .Sortable()
        .Excel(excel => excel
            .FileName(@Resources.Layout.UnitMonthlyCCWData + "_" + DateTime.Now + ".xlsx")
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export_Save", "Ajax", new { area = "" }))
            .AllPages(true)
        )
        .Events(ev =>
        {
            ev.DataBound("unitGridsData.DataBound");
            ev.ExcelExport("unitGridsData.OnMonthlyExcelExport");
        })
        .Scrollable(scr => scr.Height(640))
        .Filterable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(int.MaxValue)
            .ServerOperation(true)
            .Group(group =>
            {
                group.Add(c => c.UnitMonthlyConfig.ProductType.SortableName);
                group.Add(c => c.UnitMonthlyConfig.ProcessUnit.Factory.FactorySortableName);
            })
                    .Read(read => read.Action("ReadMonthlyChemicalClearedWaterReport", "MonthlyChemicalClearedWater", new { area = "MonthlyDataReporting" }).Data("unitGridsData.SendDate").Type(HttpVerbs.Post))
            .Events(events =>
            {
                events.Error("kendoAdditional.ErrorHandler");
                events.RequestEnd("unitGridsData.DataSave");
            })
        )
)
@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none">@Html.Partial("_KendoGridErrorWindow")</div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>
@section scripts{
    @Scripts.Render("~/bundles/custom/kendoadditional")
    @Scripts.Render("~/bundles/custom/unitGrids")

    @if (Model != null)
    {
        <script>
            $(function () {
                kendoAdditional.RefreshGrid('#monthly-recalc-data-report');
            });
        </script>
    }
}
@section sidebar{
    @Html.Partial("_MonthSelectorAproveableRecalcSideBar", Model)
}