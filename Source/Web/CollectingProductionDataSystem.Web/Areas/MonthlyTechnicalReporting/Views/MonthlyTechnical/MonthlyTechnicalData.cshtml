@using System.Web.Optimization;
@using CollectingProductionDataSystem.Constants;
@using CollectingProductionDataSystem.Web.Areas.MonthlyDataReporting.Models;
@using CollectingProductionDataSystem.Web.Areas.MonthlyTechnicalReporting.ViewModels;
@using CollectingProductionDataSystem.Web.Infrastructure.Helpers;
@using Resources = App_GlobalResources.Resources;

@model MonthlyTechnicalViewModel
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}
<div class="content-wrapper">
    @Html.Partial("_ExportDataSettings")

    <div class="row">
        <div class="col-md-8">
            <h2 id="monthly-technical-title">@Resources.Layout.MonthlyTechnologicalReport</h2>
        </div>
        <div class="col-md-4" style="float: right">
            <button type="button" id="export-pdf" class="k-button k-button-icontext k-grid-pdf pull-right head-button" style="margin-left:5px;"><span class="k-icon k-i-pdf"></span>Експорт в Pdf</button>
            <button id="excel-tech-report-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
        </div>
    </div>
    @Html.ValidationSummary()
    @Html.AntiForgeryToken()
    @(Html.Kendo()
          .Editor()
          .Name("report-details")
          .HtmlAttributes(new { style = "width: 100%;height:340px;" })
          .Resizable(resizable => resizable.Content(false).Toolbar(true))
          .Tools(tools => tools
              .CustomTemplate(ct => ct.Template("<button id='editor-save-changes' class='btn btn-info'><span class='glyphicon glyphicon-floppy-disk'></span>Запази</button>"))
          )
          .Pdf(pdf =>
          {
              pdf.AllPages();
              pdf.PaperSize("A4");
              pdf.Margin("1cm", "1cm", "2cm", "2cm");
          })
          .Value("")
          )

    @(Html.Kendo()
          .Grid<MonthlyTechnicalViewModel>()
          .Name("technological-data")
          .AutoBind(false)
          .Columns(
              columns =>
              {
                  columns.Bound(c => c.Id).Hidden(true).Width(75);
                  columns.Bound(c => c.Factory).Hidden(true).ClientGroupHeaderTemplate("Производство #=value.substr(3,value.length-3)#").Width(8);
                  columns.Bound(c => c.ProcessUnit).Hidden(true).ClientGroupHeaderTemplate("Инсталация #=value.substr(3,value.length-3)#").Width(8);
                  columns.Bound(c => c.MaterialType).Hidden(true).ClientGroupHeaderTemplate("#=value.substr(3,value.length-3)#").Width(8);
                  columns.Bound(c => c.DetailedMaterialType).Hidden(true).ClientGroupHeaderTemplate("#=value.substr(3,value.length-3)#").Width(8);
                  columns.Bound(c => c.Code).Width(80);
                  columns.Bound(c => c.Name).Width(260);
                  columns.Bound(c => c.MeasurementUnit).Width(60);
                  columns.Bound(c => c.MonthPlanValue).ClientTemplate("<div style='text-align:right;'>#=data.MonthPlanValue#</div>");
                  columns.Bound(c => c.MonthPlanPercentage).ClientTemplate("<div style='text-align:right;'>#=data.MonthPlanPercentage#</div>");
                  columns.Bound(c => c.MonthFactValue).ClientTemplate("<div style='text-align:right;'>#=data.MonthFactValue#</div>");
                  columns.Bound(c => c.MonthFactPercentage).ClientTemplate("<div style='text-align:right;'>#=data.MonthFactPercentage#</div>");
                  columns.Bound(c => c.MonthFactValueDifference).ClientTemplate("<div style='text-align:right;'>#=data.MonthFactValueDifference#</div>");
                  columns.Bound(c => c.MonthFactPercentageDifference).ClientTemplate("<div style='text-align:right;'>#=data.MonthFactPercentageDifference#</div>");
                  columns.Bound(c => c.YearFactValue).ClientTemplate("<div style='text-align:right;'>#=data.YearFactValue#</div>");
                  columns.Bound(c => c.YearFactPercentage).ClientTemplate("<div style='text-align:right;'>#=data.YearFactPercentage#</div>");
                  //columns.Bound(c => c.YearFactValueDifference).ClientTemplate("<div style='text-align:right;'>#=data.YearFactValueDifference#</div>");
                  //columns.Bound(c => c.YearFactPercentageDifference).ClientTemplate("<div style='text-align:right;'>#=data.YearFactPercentageDifference#</div>");
              })
          .Pageable(pageable => pageable
              .Refresh(true)
              .PageSizes(false)
              .Numeric(false)
              .PreviousNext(false)
          )
          .Sortable()
          .Excel(excel => excel
              .FileName(@Resources.Layout.MonthlyTechnologicalReport + "_" + DateTime.Now + ".xlsx")
              .Filterable(true)
              .ProxyURL(Url.Action("Excel_Export_Save", "Ajax", new { area = "" }))
              .AllPages(true))
          .Pdf(pdf => pdf
              .AllPages()
              .AvoidLinks()
              .PaperSize("A4")
              .Scale(0.3)
              .Margin("4.5cm", "1cm", "2.5cm", "1cm")
              .Landscape()
              .RepeatHeaders()
              .FileName("TestDocument.pdf")
              .ProxyURL(Url.Action("Pdf_Export_Save", "Ajax"))
          )
          .Events(ev =>
          {
              ev.DataBound("unitGridsData.DataBound");
          })
          .Scrollable(scr => scr.Height(340))
          .Filterable()
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(int.MaxValue)
              .ServerOperation(true)
              .Group(group =>
              {
                  //group.Add(c => c.Factory);
                  group.Add(c => c.ProcessUnit);
                  group.Add(c => c.MaterialType);
                  group.Add(c => c.DetailedMaterialType);
              })
              .Sort(sort => sort.Add(x => x.Code).Ascending())
              .Read(read => read.Action("ReadMonthlyTechnicalData", "MonthlyTechnical", new { area = "MonthlyTechnicalReporting" }).Data("unitGridsData.SendDate"))
              .Model(model =>
              {
                  model.Id(p => p.Id);
                  model.Field(p => p.Code).Editable(false);
                  model.Field(p => p.Name).Editable(false);
              })
              .Events(events =>
              {
                  events.Error("kendoAdditional.ErrorHandler");
              })
          )
          )
</div>
@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none"> @Html.Partial("_KendoGridErrorWindow") </div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>
@section scripts{
    @Scripts.Render("~/bundles/custom/kendoadditional")
    @Scripts.Render("~/bundles/custom/unitGrids")
    @Scripts.Render("~/Scripts/kendo/jszip.min.js")
    @Scripts.Render("~/Scripts/kendo/pako_deflate.min.js")
    @Scripts.Render("~/Scripts/custom/techReportToPdfPageSetup.js")
    <script>
        $(function () {
            $("#export-pdf").click(function () {
                var exportData = pdfPageSetup.GetPdfExportData("#export-data-settings");
                var grid = $("#technological-data").data("kendoGrid");
                var editor = $("#report-details").data("kendoEditor");
                var progress = $.Deferred();
                var editorsPages;

                editor._drawPDF(progress)
                   .then(function (editorPages) {
                       editorsPages = editorPages;
                   });

                grid._drawPDF(progress)
                    .then(function (root) {
                        for (var i = editorsPages.children.length - 1 ; i >= 0; i--) {
                            editorsPages.children[i].options.set("landscape", "false");
                            editorsPages.children[i].options.set("pdf.paperSize", "A4");
                            root.children.unshift(editorsPages.children[i]);
                        }
                        root.options.pdf.paperSize = "auto";
                        var resultArr = [];
                        root.children.forEach(function (element, index, array) {
                            var pageClone = $.extend({}, element);
                            resultArr.push(pdfPageSetup.FormatPage(pageClone, index + 1, array.length, exportData));
                        });
                        root.children = resultArr;
                        return kendo.drawing.exportPDF(root, { multiPage: true });
                    })
                    .done(function (dataURI) {
                        kendo.saveAs({
                            dataURI: dataURI,
                            fileName: '@(Resources.Layout.MonthlyTechnologicalReport + "_" + DateTime.Now + ".pdf")'
                        });
                        progress.resolve();
                    });

            });
        })
    </script>
}

@section sidebar{
    @Html.Partial("_TechnicalReportsSelectorSideBar")
}