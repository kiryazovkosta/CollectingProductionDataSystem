@using System.Web.Optimization;
@using CollectingProductionDataSystem.Web.Areas.ShiftReporting.ViewModels;
@using CollectingProductionDataSystem.Web.Infrastructure.Helpers;
@using CollectingProductionDataSystem.Web.ViewModels.Units;
@using Resources = App_GlobalResources.Resources;

@model UnitDailyDataViewModel
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}

<div class="row">
    <div class="col-md-10">
        <h2>@Resources.Layout.UnitsDailyReportData</h2>
    </div>
    <div class="col-md-2">
        <button id="excel-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
    </div>
</div>
@Html.ValidationSummary()
@Html.AntiForgeryToken()

@(Html.Kendo()
    .Grid<UnitDailyDataViewModel>()
    .Name("units")
    .AutoBind(false)

    .Columns(
        columns =>
        {
            columns.Bound(c => c.UnitsDailyConfig.Code)
                .ClientTemplate(
                Ajax.AuthorizedAjaxActionLinkOrText("#=data.UnitsDailyConfig.Code#", "Index", "History",
                                                new AjaxOptions() { HttpMethod = "Get", OnSuccess = "showRecordHistoriModal" },
                                                new { area = "RecordsHistory", id = "#=data.id#", entityName = "UnitsDailyData" },
                                                new { data_ajax_mode = "replace", data_ajax_update = @"\#modal-dialog-body" })
                                                .ToHtmlString())
                .Width(100);
            columns.Bound(c => c.UnitsDailyConfig.ProcessUnit.Factory.FactorySortableName).Hidden(true).ClientGroupHeaderTemplate("Производство #=value.substr(3,value.length-3)#").Width(10);
            columns.Bound(c => c.UnitsDailyConfig.ProcessUnit.SortableShortName).Hidden(true).ClientGroupHeaderTemplate("Инсталация #=value.substr(3,value.length-3)#").Width(10);
            columns.Bound(c => c.UnitsDailyConfig.DailyProductType.Sort).Hidden(true).ClientGroupHeaderTemplate("#=value#").Width(10);
            columns.Bound(c => c.UnitsDailyConfig.ProcessUnit.ShortName).Width(140);
            columns.Bound(c => c.UnitsDailyConfig.Name);
            columns.Bound(c => c.UnitsDailyConfig.MeasureUnit.Code).Width(80);
            columns.Bound(c => c.Value).Width(100).Format("{0:n2}");
            columns.Bound(c => c.UnitsManualDailyData.Value)
                 .ClientTemplate(
                Ajax.AuthorizedAjaxActionLinkOrText("#=data.UnitsManualDailyData.Value.toLocaleString(kendo.culture().name)#", "Index", "History",
                                                new AjaxOptions() { HttpMethod = "Get", OnSuccess = "showRecordHistoriModal" },
                                                new { area = "RecordsHistory", id = "#=data.id#", entityName = "UnitsManualDailyData" },
                                                new { data_ajax_mode = "replace", data_ajax_update = @"\#modal-dialog-body" })
                                                .ToHtmlString())
                .Width(100)
                .Format("{0:n2}");
            columns.Bound(c => c.TotalMonthQuantity).Width(100);
            columns.Bound(c => c.UnitsManualDailyData.EditReason).Width(180).ClientTemplate("#:UnitsManualDailyData.EditReason.Name#")
                .ClientTemplate("<div class=row><div class='col-xs-2 no-horisontal-padding'><div class='#:UnitsManualDailyData.EditReason.Id == 0? 'bg-ok':'bg-edited'#'></div></div><div class='col-xs-9 no-horisontal-padding reason'>#:UnitsManualDailyData.EditReason.Name#</div></div>");
        })
                                                            .Pageable(pageable => pageable
                                                                .Refresh(true)
                                                                .PageSizes(new[] { 100, 200, 300, 1500 })
                                                                .ButtonCount(5)
                                                            )
                                                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                            .Sortable()
                                                             .Excel(excel => excel
                                                                .FileName(@Resources.Layout.UnitsDailyData + "_" + DateTime.Now + ".xlsx")
                                                                .Filterable(true)
                                                                .ProxyURL(Url.Action("Excel_Export_Save", "Ajax", new { area = "" }))
                                                                .AllPages(true))
                                                                .Events(ev => ev.DataBound("unitGridsData.DataBound"))
                                                                .Scrollable(scr => scr.Height(640))
                                                                .Filterable()
                                                                .ClientDetailTemplateId("template")
                                                                .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .PageSize(1500)
                                                                .ServerOperation(true)
                                                                        .Group(group =>
                                                                        {
                                                                            group.Add(c => c.UnitsDailyConfig.ProcessUnit.Factory.FactorySortableName);
                                                                            group.Add(c => c.UnitsDailyConfig.ProcessUnit.SortableShortName);
                                                                            group.Add(c => c.UnitsDailyConfig.DailyProductType.Sort);
                                                                        })
                                                                                .Read(read => read.Action("ReadDailyUnitsData", "SummaryReports", new { area = "SummaryReporting" }).Type(HttpVerbs.Get).Data("unitGridsData.SendDateForSummaryReports")) // To enable caching must send HttpGet Request unitGridsData.SendDate"))
                                                                .Model(model =>
                                                                {
                                                                    model.Id(p => p.Id);
                                                                    model.Field(p => p.UnitsDailyConfig.Code).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.DailyProductType.Name).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.ProcessUnit.ShortName).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.Name).Editable(false);
                                                                    model.Field(p => p.UnitsDailyConfig.MeasureUnit.Code).Editable(false);
                                                                    model.Field(p => p.Value).Editable(false);
                                                                    model.Field(p => p.UnitsManualDailyData.Value).Editable(true);
                                                                    model.Field(p => p.UnitsManualDailyData.EditReason).Editable(true);
                                                                })
                                                                .Events(events =>
                                                                {
                                                                    events.Error("kendoAdditional.ErrorHandler");
                                                                    events.RequestEnd("unitGridsData.DataSave");
                                                                })
                                                            )
                                                                    .Events(ev => ev.DataBound("unitGridsData.DataBound"))
)


@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none">@Html.Partial("_KendoGridErrorWindow")</div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<UnitDataViewModel>()
            .Name("details_#=Id#") // template expression, to be evaluated in the master context
            .Columns(
                columns =>
                {
                    columns.Bound(c => c.UnitConfig.Code).Width(77);
                    columns.Bound(c => c.UnitConfig.ProcessUnit.ShortName).Width(100);
                    columns.Bound(c => c.UnitConfig.Name);
                    columns.Bound(c => c.UnitConfig.Position).Width(140);
                    columns.Bound(c => c.UnitConfig.MeasureUnit.Code).Width(80);
                    columns.Bound(c => c.UnitConfig.CollectingDataMechanism).Width(30).Title(string.Empty);
                    columns.Bound(c => c.Value).Width(100).Format("{0:n2}");
                    columns.Bound(c => c.UnitsManualData.Value).Width(100).Format("{0:n2}");
                    columns.Bound(c => c.UnitsManualData.EditReason).Width(200).ClientTemplate("\\#:UnitsManualData.EditReason.Name\\#")
                        .ClientTemplate("<div class=row><div class='col-xs-2 no-horisontal-padding'><div class='\\#:UnitsManualData.EditReason.Id == 0? 'bg-ok':'bg-edited'\\#'></div></div><div class='col-xs-9 no-horisontal-padding reason'>\\#:UnitsManualData.EditReason.Name\\#</div></div>");
                    columns.Bound(c => c.Shift).Hidden(true).ClientGroupHeaderTemplate(@Resources.Layout.Shift + " \\#=value\\#");
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    //.PageSize(100)
                    .ServerOperation(false)
                    .Group(group => group.Add(c => c.Shift))
                    .Read(read => read.Action("ReadDetails", "Ajax", new { area = "SummaryReporting", recordId = "#=Id#" }).Type(HttpVerbs.Get))//To enable caching must send HttpGet Request .Data("sendAntiForgery"))
                    .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.UnitConfig.Code).Editable(false);
                    model.Field(p => p.UnitConfig.ShiftProductType.Name).Editable(false);
                    model.Field(p => p.UnitConfig.ProcessUnit.ShortName).Editable(false);
                    model.Field(p => p.UnitConfig.Name).Editable(false);
                    model.Field(p => p.UnitConfig.Position).Editable(false);
                    model.Field(p => p.UnitConfig.MeasureUnit.Code).Editable(false);
                    model.Field(p => p.UnitConfig.CollectingDataMechanism).Editable(false);
                    model.Field(p => p.Value).Editable(false);
                    model.Field(p => p.UnitsManualData.Value).Editable(false);
                    model.Field(p => p.UnitsManualData.EditReason).Editable(false);
                })
                )
                .ToClientTemplate()
    )
</script>

@section scripts{
    @Scripts.Render("~/bundles/custom/kendoadditional")
    @Scripts.Render("~/bundles/custom/unitGrids")
    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")
}
@section sidebar{
    @Html.Partial("_UnitsDailySideBar")
}
