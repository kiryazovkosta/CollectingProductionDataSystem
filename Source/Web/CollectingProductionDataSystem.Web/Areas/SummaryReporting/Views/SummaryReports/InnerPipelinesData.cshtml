@using System.Web.Optimization;
@using CollectingProductionDataSystem.Web.Areas.MonthlyReporting.ViewModels;
@using Resources = App_GlobalResources.Resources;

@model InnerPipelinesDataViewModel
@{
    Layout = "~/Views/Shared/_KendoLayoutWithSideBar.cshtml";
}
<div class="row">
    <div class="col-md-10">
        <h2>@Resources.Layout.InnerPipelinesData</h2>
    </div>
    <div class="col-md-2">
        <button id="excel-export" class="k-button k-button-icontext k-grid-excel pull-right head-button"><span class="k-icon k-i-excel"></span>Експорт в Excel</button>
    </div>
</div>
@{var now = DateTime.Now;}
@Html.ValidationSummary()
@Html.AntiForgeryToken()
@(Html.Kendo()
            .Grid<InnerPipelinesDataViewModel>()
            .Name("inner-pipes")
            .AutoBind(false)
            .Columns(
                columns =>
                {
                    columns.Bound(c => c.Product.ProductType.SortableName).Hidden(true).ClientGroupHeaderTemplate("#=value.substr(4,value.length-4)#");
                    columns.ForeignKey(c => c.ProductId, (System.Collections.IEnumerable)ViewData["products"], "Id", "Name").EditorTemplateName("ProductViewModel").Width(500);
                    columns.Bound(c => c.Mass).Format("{0:n3}");
                    columns.Bound(c => c.Volume).Format("{0:n3}");
                })
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(false)
                .Numeric(false)
                .PreviousNext(false)
            )

            .Editable(editable => editable.Mode(GridEditMode.InLine))
            .Sortable()
            .Excel(excel => excel
                .FileName(@Resources.Layout.InnerPipelinesData + "_" + DateTime.Now + ".xlsx")
                .Filterable(true)
                .ProxyURL(Url.Action("Excel_Export_Save", "Ajax", new { area = "" }))
                .AllPages(true)
            )
            .Scrollable(scr => scr.Height(640))
            .Filterable()
            .DataSource(dataSource => dataSource
                .Ajax()
                        .PageSize(int.MaxValue)
                        .ServerOperation(true)
                                    .Read(read => read.Action("ReadInnerPipelinesData", "SummaryReports", new { area = "SummaryReporting" }).Type(HttpVerbs.Get).Data("unitGridsData.SendDate"))
                        
                .Group(group =>
                {
                    group.Add(c => c.Product.ProductType.SortableName);
                })
                
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);
                    model.Field(p => p.RecordTimestamp).Editable(false);
                    model.Field(p => p.ProductId).Editable(false);
                    model.Field(p => p.Product).Editable(false);
                    model.Field(p => p.Product.ProductType).Editable(false);
                    model.Field(p => p.Mass).Editable(true);
                    model.Field(p => p.Volume).Editable(true);
                })
                .Events(events =>
                {
                    events.Error("kendoAdditional.ErrorHandler");
                    events.Change("kendoAdditional.OnPipeChange");
                    events.RequestEnd("kendoAdditional.OnRequestEnd");
                })
            )
)

@* //Error window for kendo grid error event handler *@
<div id="err-window" style="display:none">@Html.Partial("_KendoGridErrorWindow")</div>
@* //Error window for kendo grid error event handler *@
<div id="success-window" style="display:none">@Html.Partial("_SuccessWindow")</div>

@section scripts{
    @Scripts.Render("~/bundles/custom/kendoadditional")
    @Scripts.Render("~/bundles/custom/unitGrids")
    @Scripts.Render("~/Scripts/custom/renderDailyGraphic.min.js")
    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")
}
@section sidebar{
    @Html.Partial("_MonthSelectorSideBar")
}
