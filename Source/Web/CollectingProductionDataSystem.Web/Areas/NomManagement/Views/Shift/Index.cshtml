@(Html.Kendo().Grid<CollectingProductionDataSystem.Web.Areas.NomManagement.Models.ViewModels.ShiftViewModel>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Name);
          columns.Bound(c => c.BeginTime).Format("{0:HH:mm}");
          columns.Bound(c => c.ReadOffset).Format("{0:HH:mm}");
          columns.Bound(c => c.ReadPollTimeSlot).Format("{0:HH:mm}");
          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(230);
      })
          .ToolBar(toolbar =>
          {
              toolbar.Create();
              toolbar.Excel();
          })
          .Editable(editable => editable.Mode(GridEditMode.InLine))
          .Pageable(pageable => pageable
              .Refresh(true)
              .PageSizes(new[] { 20, 50, 100 })
              .ButtonCount(5)
          )
          .Sortable(sortable =>
          {
              sortable.SortMode(GridSortMode.SingleColumn);
          })
          .Filterable()
          .Scrollable(scrol => scrol.Height(620))
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(20)
              .Model(model => model.Id(p => p.Id))
                      .Read(read => read.Action("Read", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
                      .Create(create => create.Action("Create", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
                      .Update(update => update.Action("Update", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
                      .Destroy(destroy => destroy.Action("Destroy", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
              .Events(events =>
                {
                    events.Error("error_handler");
                })
          )
)
