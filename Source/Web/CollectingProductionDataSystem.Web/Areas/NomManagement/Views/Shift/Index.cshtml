@(Html.Kendo().Grid<CollectingProductionDataSystem.Web.Areas.NomManagement.Models.ViewModels.ShiftViewModel>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Name)
              .ClientTemplate(Ajax.AuthorizedAjaxActionLinkOrText("#=data.Name#", "Index", "History",
                                                new AjaxOptions() { HttpMethod = "Get", OnSuccess = "showRecordHistoriModal" },
                                                new { area = "RecordsHistory", id = "#=data.id#", entityName = "Shift" },
                                                new { data_ajax_mode = "replace", data_ajax_update = @"\#record-history-body" })
                                                .ToHtmlString());
          columns.Bound(c => c.BeginTime)
                 .ClientTemplate("#=kendo.format(\"{0}.{1:00}:{2:00}\",data.BeginTime == null?0:BeginTime.Days,data.BeginTime == null?0:BeginTime.Hours, data.BeginTime == null?0:BeginTime.Minutes)#");
          columns.Bound(c => c.ReadOffset).ClientTemplate("#=kendo.format(\"{0}.{1:00}:{2:00}\",data.ReadOffset == null?0:ReadOffset.Days,data.ReadOffset == null?0:ReadOffset.Hours, data.ReadOffset == null?0:ReadOffset.Minutes)#");
          columns.Bound(c => c.ReadPollTimeSlot).ClientTemplate("#=kendo.format(\"{0}.{1:00}:{2:00}\",data.ReadPollTimeSlot == null?0:ReadPollTimeSlot.Days,data.ReadPollTimeSlot == null?0:ReadPollTimeSlot.Hours, data.ReadPollTimeSlot == null?0:ReadPollTimeSlot.Minutes)#");
          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(230);
      })
          .ToolBar(toolbar =>
          {
              toolbar.Create();
              toolbar.Excel();
          })
          .Editable(editable => editable.Mode(GridEditMode.InLine))
          .Pageable(pageable => pageable
              .Refresh(true)
              .PageSizes(new[] { 20, 50, 100 })
              .ButtonCount(5)
          )
          .Sortable(sortable =>
          {
              sortable.SortMode(GridSortMode.SingleColumn);
          })
          .Filterable()
          .Scrollable(scrol => scrol.Height(620))
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(20)
                  .Model(model => 
                  {
                      model.Id(p => p.Id);
                      model.Field(p => p.BeginTime).DefaultValue(new TimeSpan());
                      model.Field(p => p.ReadOffset).DefaultValue(new TimeSpan());
                      model.Field(p => p.ReadPollTimeSlot).DefaultValue(new TimeSpan());                                            
                  })
                      .Read(read => read.Action("Read", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
                      .Create(create => create.Action("Create", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
                      .Update(update => update.Action("Update", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
                      .Destroy(destroy => destroy.Action("Destroy", "Shift", new { area = "NomManagement" }).Data("sendAntiForgery"))
              .Events(events =>
                {
                    events.Error("error_handler");
                })
              )
              .Events(ev => ev.DataBound("deletableDataBound"))
)
