@using CollectingProductionDataSystem.Web.Areas.NomManagement.Models.ViewModels;
@using Resources = App_GlobalResources.Resources;

@(Html.Kendo()
      .Grid<CollectingProductionDataSystem.Web.Areas.NomManagement.Models.ViewModels.UnitMonthlyConfigViewModel>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(230);
          columns.Bound(c => c.Code)
          .ClientTemplate(
          Ajax.AuthorizedAjaxActionLinkOrText("#=data.Code#", "Index", "History",
          new AjaxOptions() { HttpMethod = "Get", OnSuccess = "showRecordHistoriModal" },
          new { area = "RecordsHistory", id = "#=data.id#", entityName = "UnitConfig" },
          new { data_ajax_mode = "replace", data_ajax_update = @"\#modal-dialog-body" })
          .ToHtmlString())
          .Width(100);
          columns.Bound(c => c.Name).Width(200);
          columns.ForeignKey(c => c.ProcessUnitId, (System.Collections.IEnumerable)ViewData["processUnits"], "Id", "FullName").EditorTemplateName("ProcessUnitViewModel").Width(280);
          columns.ForeignKey(c => c.ProductId, (System.Collections.IEnumerable)ViewData["products"], "Id", "Name").EditorTemplateName("ProductViewModel").Width(280);
          columns.ForeignKey(c => c.MeasureUnitId, (System.Collections.IEnumerable)ViewData["measureUnits"], "Id", "Name").EditorTemplateName("MeasureUnitViewModel").Width(280);
          columns.ForeignKey(c => c.MonthlyReportTypeId, (System.Collections.IEnumerable)ViewData["monthlyReportTypes"], "Id", "Name").EditorTemplateName("MonthlyReportTypeViewModel").Width(280);
          columns.ForeignKey(c => c.ProductTypeId, (System.Collections.IEnumerable)ViewData["dailyProductTypes"], "Id", "Name").EditorTemplateName("DailyProductTypeViewModel").Width(280);
          columns.Bound(c => c.AggregationFormula).Width(380);
          columns.Bound(c => c.AggregationCurrentLevel).Width(100);
          columns.Bound(c => c.UnitDailyConfigUnitMonthlyConfigs).Width(300).ClientTemplate("#=unitConfigTemplate(UnitDailyConfigUnitMonthlyConfigs)#");
          columns.Bound(c => c.RelatedUnitMonthlyConfigs).Width(300).ClientTemplate("#=unitConfigTemplate(RelatedUnitMonthlyConfigs)#");
          columns.Bound(c => c.IsEditable).Width(100);
          columns.Bound(c => c.IsManualEntry).Width(100);
          columns.Bound(c => c.IsTotalPosition).Width(100);          
          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(230);
      })
      .Resizable(res => res.Columns(true))
      .ToolBar(toolbar =>
            {
                toolbar.Create();
                toolbar.Excel();
            })
      .Excel(excel => excel
            .FileName(@Resources.Layout.UnitsDailyConfig + "_" + DateTime.Now + ".xlsx")
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export_Save", "Ajax", new { area = "" }))
            .AllPages(true)
        )
      .Editable(editable => editable.Mode(GridEditMode.InLine))
      .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] { 20, 50, 100 })
                .ButtonCount(5)
         )
      .Sortable(sortable =>
                    {
                        sortable.SortMode(GridSortMode.SingleColumn);
                    })
      .Filterable()
      .Scrollable(scrol => scrol.Height(620))
      .Scrollable()
      .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    .Model(model =>
                    {
                        model.Id(p => p.Id);
                        model.Field(p => p.UnitDailyConfigUnitMonthlyConfigs).DefaultValue(new HashSet<UnitDailyConfigUnitMonthlyConfigViewModel>() { new UnitDailyConfigUnitMonthlyConfigViewModel() }).Editable(true);
                        model.Field(p => p.RelatedUnitMonthlyConfigs).DefaultValue(new HashSet<RelatedUnitMonthlyConfigsViewModel>() { new RelatedUnitMonthlyConfigsViewModel() }).Editable(true);
                        model.Field(p => p.IsEditable).DefaultValue(true);

                    })
                    .Read(read => read.Action("Read", "UnitMonthlyConfig", new { area = "NomManagement" }).Data("sendAntiForgery"))
                    .Create(create => create.Action("Create", "UnitMonthlyConfig", new { area = "NomManagement" }).Data("sendAntiForgery"))
                    .Update(update => update.Action("Update", "UnitMonthlyConfig", new { area = "NomManagement" }).Data("sendAntiForgery"))
                    .Destroy(destroy => destroy.Action("Destroy", "UnitMonthlyConfig", new { area = "NomManagement" }).Data("sendAntiForgery"))
                    .Events(events =>
                    {
                        events.Error("kendoAdditional.ErrorHandler");
                        events.RequestEnd("kendoAdditional.AfterterNomGridValidation");
                    })
                )
      .Events(ev =>
      {
          ev.DataBound("kendoAdditional.DeletableDataBound");
          ev.ExcelExport("beforeExcelExport");
      })
)

<script type="text/kendo" id="unitConfigTemplate">
    #if(data){#
    <ul>
        #for(var i = 0; i< data.length; i++){#
        #if(data[i].Code != null){#
        <li>#:data[i].Code#</li>
        #}#
        #}#
    </ul>
    #}#

</script>

<script type="text/kendo" id="relatedUnitConfigTemplate">
    #if(data){#
    <ul>
        #for(var i = 0; i< data.length; i++){#
        #if(data[i].Code != null){#
        <li>#:data[i].Code#</li>
        #}#
        #}#
    </ul>
    #}#

</script>

<script type="text/javascript">
    var unitConfigTemplate = kendo.template($("#unitConfigTemplate").html(), { useWithBlock: false });
    var relatedUnitConfigTemplate = kendo.template($("#relatedUnitConfigTemplate").html(), { useWithBlock: false });
</script>
